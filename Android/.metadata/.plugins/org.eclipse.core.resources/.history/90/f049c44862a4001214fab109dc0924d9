package com.motlee.android.object;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.apache.http.client.HttpClient;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpParams;
import com.facebook.android.Facebook;
import com.motlee.android.R;
import com.motlee.android.database.DatabaseWrapper;
import com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiscCache;
import com.nostra13.universalimageloader.cache.memory.impl.WeakMemoryCache;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.ImageScaleType;
import com.nostra13.universalimageloader.utils.StorageUtils;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import android.widget.ImageView;

public class GlobalVariables {
	
	public static boolean JUST_TOOK_PHOTO = false;
	
	private Typeface gothamLightFont;
    
    private Display display;
    
    public static int DISPLAY_WIDTH;
    
    public static int DISPLAY_HEIGHT;
    
    public static boolean FINISHED_RETRIEVING_FRIENDS = false;
    
    public static String SENDER_ID = "342498749637";
    
    private Typeface helveticaNeueRegularFont;
    
    private Typeface helveticaNeueBoldFont;
    
    private SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMM dd, yyyy h:mm aa");
    
	private static final String JPEG_FILE_PREFIX = "IMG_";
	private static final String JPEG_FILE_SUFFIX = ".jpg";
	private static final String CAMERA_DIR = "/dcim/";
    
    private HashMap<Integer, PhotoItem> userPhotos = new HashMap<Integer, PhotoItem>();
    
    private String authoToken;
    
    private Facebook facebook;
   
    private int userId;
    
    private int menuButtonsHeight;
    
    private ImageLoader imageLoader = ImageLoader.getInstance();
    private DisplayImageOptions options;
    
    private ExecutorService threadPool = Executors.newCachedThreadPool();
    
    private int maxEventListImageHeight;
    
    private Location userLocation;
    
    private String AWS_URL = "http://s3.amazonaws.com/motlee-staging-photos/images/";
    
    public static String FOMOS = "fomos";
    public static String ATTENDEES = "attendees";
    public static String DATE = "date";
    public static String LOCATION = "location";
    public static String FB_APP_ID = "283790891721595";
    
    public static File file = new File(Environment.getExternalStorageDirectory() + File.separator + "test2.txt");
    
	private static GlobalVariables instance;
	
	private static Handler handler = new Handler();
	
	public static synchronized GlobalVariables getInstance()
	{
		if (instance == null)
		{
			instance = new GlobalVariables();
		}
		return instance;
	}
	
	private GlobalVariables() {
		
		
		
	}
	
	private LocationListener locationListener;
	private static final int LOCATION_CHANGE_THRESHOLD = 20; //meters

	private static final Location HOME_TAVERN_LOCATION = new Location("") {{
        setLatitude(0);
        setLongitude(0);
	}};
	
	private Location getLastKnownLocation(LocationManager locationManager) {
		List<String> providers = locationManager.getProviders(true);
		Location bestLocation = null;
		for (String provider : providers) {
			Location l = locationManager.getLastKnownLocation(provider);

			if (l == null) {
				continue;
			}
			if (bestLocation == null
					|| l.getAccuracy() < bestLocation.getAccuracy()) {
				bestLocation = l;
			}
		}
		if (bestLocation == null) {
			return null;
		}
		return bestLocation;
	}
	
	/*
	 * Set up locationListener, we basically get the current location right now
	 * and when the user moves by LOCATION_CHANGE_THRESHOLD, we update
	 */
	public void setUpLocationListener(Context context)
	{
		userLocation = HOME_TAVERN_LOCATION;
	    // Instantiate the default criteria for a location provider
		// TODO: May need to change in future
	    Criteria criteria = new Criteria();
	    // Get a location manager from the system services
	    LocationManager locationManager = 
	            (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
	    // Get the location provider that best matches the criteria
	    String bestProvider = locationManager.getBestProvider(criteria, true);
	    if (bestProvider != null) {
	        // Get the user's last known location
	    	userLocation = getLastKnownLocation(locationManager);
	        if (locationManager.isProviderEnabled(bestProvider) 
	                    && locationListener == null) {
	            // Set up a location listener if one is not already set up
	            // and the selected provider is enabled
	            locationListener = new LocationListener() {
	                
	                public void onLocationChanged(Location location) 
	                {
	                    // On location updates, compare the current
	                    // location to the desired location set in the
	                    // place picker
	                	if (location != null)
	                	{
	                		if (userLocation == null)
	                		{
	                			userLocation = location;
	                		}
	                		
		                    float distance = location.distanceTo(userLocation);
		                    
		                    if (distance >= LOCATION_CHANGE_THRESHOLD) {
		                    	userLocation = location;
		                    }
	                	}
	                }
	                
	                public void onStatusChanged(String s, int i, 
	                            Bundle bundle) {
	                }
	                
	                public void onProviderEnabled(String s) {
	                }
	                
	                public void onProviderDisabled(String s) {
	                }
	            };
	            locationManager.requestLocationUpdates(bestProvider, 
	                    1, LOCATION_CHANGE_THRESHOLD,
	                    locationListener, 
	                    Looper.getMainLooper());
	        }
	    }
	    
	    if (userLocation == null)
	    {
	    	userLocation = HOME_TAVERN_LOCATION;
	    }
	}
	
	public HashMap<Integer, PhotoItem> getUserPhotos()
	{
		return userPhotos;
	}
	
	/*public AlertDialog getWeakConnectionAlertDialog(Context context)
	{
		AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
				context);
		
		alertDialogBuilder
		.setMessage("Select Photo Source")
		.setCancelable(true)
		.setPositiveButton("Camera",new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog,int id) {
				// if this button is clicked, close
				// current activity
				
				Intent takePictureIntent = new Intent(activity, TakePhotoActivity.class);
				takePictureIntent.putExtra("Action", TakePhotoActivity.TAKE_PHOTO);
				takePictureIntent.putExtra("EventID", eventId);
				//removePlusMenu(activity);
				if (activity instanceof EventDetailActivity)
				{
					takePictureIntent.putExtra("EventDetail", true);
				}
				else
				{
					takePictureIntent.putExtra("EventDetail", false);
				}
				activity.startActivity(takePictureIntent);
				if (!((activity instanceof EventListActivity) || (activity instanceof EventDetailActivity)))
				{
					activity.finish();
				}
				
				dialog.cancel();
			}
		  })
		.setNegativeButton("Gallery",new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog,int id) {
				// if this button is clicked, just close
				// the dialog box and do nothing
				Intent takePictureIntent = new Intent(activity, TakePhotoActivity.class);
				takePictureIntent.putExtra("Action", TakePhotoActivity.GET_PHOTO_LIBRARY);
				takePictureIntent.putExtra("EventID", eventId);
				//removePlusMenu(activity);
				if (activity instanceof EventDetailActivity)
				{
					takePictureIntent.putExtra("EventDetail", true);
				}
				else
				{
					takePictureIntent.putExtra("EventDetail", false);
				}
				
				activity.startActivity(takePictureIntent);
				if (!((activity instanceof EventListActivity) || (activity instanceof EventDetailActivity)))
				{
					activity.finish();
				}
				
				dialog.cancel();
			}
		});
		
		// create alert dialog
		AlertDialog alertDialog = alertDialogBuilder.create();
 
				// show it
		alertDialog.show();
	}*/
	
	public String getAWSUrlThumbnail(PhotoItem photo)
	{
		if (photo == null)
		{
			return "";
		}
		else
		{
			return AWS_URL + photo.id + "/thumbnail/" + photo.image_file_name;
		}
	}
	
	public String getAWSUrlCompressed(PhotoItem photo)
	{
		if (photo == null)
		{
			return "";
		}
		else
		{
			return AWS_URL + photo.id + "/compressed/" + photo.image_file_name;
		}
	}
	
	public LocationInfo getLocationInfo()
	{
		if (userLocation != null)
		{
			LocationInfo location = new LocationInfo("Current Location", userLocation.getLatitude(), userLocation.getLongitude(), null);
			return location;
		}
		else
		{
			LocationInfo location = new LocationInfo("Current Location", 0, 0, null);
			return location;
		}
	}
	
	public HttpClient setUpHttpClient()
	{
		DefaultHttpClient ret = null;
		
        //SETS UP PARAMETERS
        HttpParams params = new BasicHttpParams();
        //REGISTERS SCHEMES FOR BOTH HTTP AND HTTPS
        SchemeRegistry registry = new SchemeRegistry();
        registry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
        ThreadSafeClientConnManager manager = new ThreadSafeClientConnManager(params, registry);
        ret = new DefaultHttpClient(manager, params);
        return ret;
	}
	
	public Location getUserLocation()
	{
		return this.userLocation;
	}
	
	public ExecutorService getExecutorService()
	{
		return threadPool;
	}
	
	public SimpleDateFormat getDateFormatter()
	{
		return simpleDateFormat;
	}
	
	public void setGothamLigtFont(Typeface gothamLightFont)
	{
		this.gothamLightFont = gothamLightFont;
	}
	
	public Typeface getGothamLightFont()
	{
		return this.gothamLightFont;
	}
	
	public void setDisplay(Display display)
	{
		this.display = display;
		DISPLAY_WIDTH = display.getWidth();
		DISPLAY_HEIGHT = display.getHeight();
	}
	
	public void refreshDisply(Context ctx)
	{
		WindowManager wm = (WindowManager) ctx.getApplicationContext().getSystemService(Context.WINDOW_SERVICE);
		this.display = wm.getDefaultDisplay();
		DISPLAY_WIDTH = display.getWidth();
		DISPLAY_HEIGHT = display.getHeight();
	}
	
	public String getFacebookPictureUrl(Long facebookUserID)
	{
		return "https://graph.facebook.com/" + facebookUserID + "/picture";
	}
	
	public String getFacebookPictureUrlLarge(Long facebookUserID)
	{
		return "https://graph.facebook.com/" + facebookUserID + "/picture?width=200&height=200";
	}
	
	public int getDisplayWidth()
	{
		return DISPLAY_WIDTH;
	}
	
	public static File createImageFile(Context context) throws IOException
	{
		// Create an image file name
		String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmssSSS").format(new Date());
		String imageFileName = JPEG_FILE_PREFIX + timeStamp + "_";
		File albumF = getAlbumDir(context);
		File imageF = File.createTempFile(imageFileName, JPEG_FILE_SUFFIX, albumF);
		return imageF;
	}
	
	public static File getAbsoluteFile(Context context, String imageFileName) throws IOException
	{
		File album = getAlbumDir(context);
		
		File imageFile = new File(album.getAbsolutePath() + imageFileName);
		
		return imageFile;
	}
	
	private static File getAlbumDir(Context context) 
	{
		File storageDir = null;

		if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) 
		{
			
			storageDir = getAlbumStorageDir("Motlee Pictures");

			if (storageDir != null) {
				if (! storageDir.mkdirs()) {
					if (! storageDir.exists()){
						Log.d("CameraSample", "failed to create directory");
						return null;
					}
				}
			}
			
		} else {
			Log.v("Motlee", "External storage is not mounted READ/WRITE.");
			storageDir = getInternalAlbumStorageDir(context, "Motlee Pictures");

			if (storageDir != null) {
				if (! storageDir.mkdirs()) {
					if (! storageDir.exists()){
						Log.d("CameraSample", "failed to create directory");
						return null;
					}
				}
			}
		}
		
		return storageDir;
	}
	
	private static File getAlbumStorageDir(String albumName) 
	{
		return new File (
				Environment.getExternalStorageDirectory()
				+ CAMERA_DIR
				+ albumName
		);
	}
	
	private static File getInternalAlbumStorageDir(Context context, String albumName)
	{
		return new File(
				context.getFilesDir() + CAMERA_DIR + albumName);
	}

	
	public void initializeImageLoader(Context context)
	{
		File cacheDir = StorageUtils.getOwnCacheDirectory(context, "motlee/Cache");
		
		ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(context.getApplicationContext())
		.threadPoolSize(5)
		.threadPriority(Thread.NORM_PRIORITY - 1)
		.memoryCache(new WeakMemoryCache())
        .discCache(new UnlimitedDiscCache(cacheDir))
        .discCacheExtraOptions(800, 800, CompressFormat.JPEG, 75)
		.build();
		
		imageLoader.init(config);
		
		options = new DisplayImageOptions.Builder()
		.imageScaleType(ImageScaleType.EXACTLY)
		.bitmapConfig(Bitmap.Config.RGB_565)
		.cacheInMemory()
		.cacheOnDisc()
		.build();
	}
	
	public void calculateEventListImageSize()
	{
    	DrawableWithHeight whole = DrawableCache.getDrawable(R.drawable.event_list_detail_background, GlobalVariables.DISPLAY_WIDTH);
    	
    	DrawableWithHeight header = DrawableCache.getDrawable(R.drawable.event_list_detail_header_background, GlobalVariables.DISPLAY_WIDTH);
    	
    	DrawableWithHeight footer = DrawableCache.getDrawable(R.drawable.event_list_detail_footer_background, GlobalVariables.DISPLAY_WIDTH);
	
    	this.maxEventListImageHeight = whole.getHeight() - header.getHeight() - footer.getHeight();
	}
	
	/*public int getMaxEventListImageHeight()
	{
		return this.maxEventListImageHeight;
	}*/
	
	public void downloadImage(ImageView imageView, String url, Integer width, boolean checkUntilURLPresent, String local_store)
	{
		Drawable backgroundDrawable = null;
		this.initializeImageLoader(imageView.getContext().getApplicationContext());
		
		if (local_store == null || local_store.equals(""))
		{
			WatermarkCache.getInstance(imageView.getContext().getApplicationContext().getResources());
			
			backgroundDrawable = WatermarkCache.getWatermark(width);
		}
		else
		{
			Uri uri = Uri.fromFile(new File(local_store));
			InputStream in = null;
			try {
				int IMAGE_MAX_SIZE = 2048;
				
				IMAGE_MAX_SIZE = width;
				
				in = imageView.getContext().getContentResolver().openInputStream(uri);
				
				//Decode image size
		        BitmapFactory.Options o = new BitmapFactory.Options();
		        o.inJustDecodeBounds = true;

		        BitmapFactory.decodeStream(in, null, o);
		        in.close();

		        int scale = 1;
		        if (o.outHeight > IMAGE_MAX_SIZE || o.outWidth > IMAGE_MAX_SIZE) {
		            scale = (int)Math.pow(2, (int) Math.round(Math.log(IMAGE_MAX_SIZE / (double) Math.max(o.outHeight, o.outWidth)) / Math.log(0.5)));
		        }

		        BitmapFactory.Options o2 = new BitmapFactory.Options();
		        o2.inSampleSize = scale;
		        o2.inPurgeable = true;
		        o2.inInputShareable = true;
		        in = imageView.getContext().getContentResolver().openInputStream(uri);
		        Bitmap b = BitmapFactory.decodeStream(in, null, o2);
		        
		        backgroundDrawable = new BitmapDrawable(b);
			} catch (FileNotFoundException e) {
				
				Log.d("GlobalVariables", "local_store was not found: " + local_store);
				WatermarkCache.getInstance(imageView.getContext().getApplicationContext().getResources());
				
				backgroundDrawable = WatermarkCache.getWatermark(width);

			} catch (IOException e) {
				
				WatermarkCache.getInstance(imageView.getContext().getApplicationContext().getResources());
				
				backgroundDrawable = WatermarkCache.getWatermark(width);
				
			}
		}
		
		imageView.setMaxHeight(width);
		imageView.setMaxWidth(width);
		
    	imageLoader.displayImage(url, imageView, options, backgroundDrawable);
	}
	
	public void downloadImage(ImageView imageView, String url, Integer width, boolean checkUntilURLPresent)
	{
		this.downloadImage(imageView, url, width, checkUntilURLPresent, null);
	}
	
	public void downloadImage(ImageView imageView, String url, Integer width)
	{
		downloadImage(imageView, url, width, false);
	}
	
	public void downloadImageWithThumbnail(ImageView imageView, PhotoItem photo, Integer width)
	{
		if (imageLoader == null)
		{
			this.initializeImageLoader(imageView.getContext().getApplicationContext());
		}
		
		Drawable drawable = null;
		String url = this.getAWSUrlCompressed(photo);
		String local_store = photo.local_store;
		
		if (local_store == null || local_store.equals(""))
		{
			
			String thumbnailUrl = this.getAWSUrlThumbnail(photo);
			
			Bitmap bitmap = getThumbnailBitmap(thumbnailUrl);
			
			//String thumbnail
			
			WatermarkCache.getInstance(imageView.getContext().getApplicationContext().getResources());
			
			imageView.setMaxHeight(width);
			imageView.setMaxWidth(width);
				
			if (bitmap != null)
			{
				drawable = new BitmapDrawable(bitmap);
				//imageLoader.displayImage(url, imageView, options, new BitmapDrawable(bitmap));
			}
			else
			{
				drawable = WatermarkCache.getWatermark(width);
				//imageLoader.displayImage(url, imageView, options, WatermarkCache.getWatermark(width));
			}
		}
		else
		{
			Uri uri = Uri.fromFile(new File(local_store));
			InputStream in = null;
			try {
				int IMAGE_MAX_SIZE = 2048;
				
				IMAGE_MAX_SIZE = width;
				
				in = imageView.getContext().getContentResolver().openInputStream(uri);
				
				//Decode image size
		        BitmapFactory.Options o = new BitmapFactory.Options();
		        o.inJustDecodeBounds = true;

		        BitmapFactory.decodeStream(in, null, o);
		        in.close();

		        int scale = 1;
		        if (o.outHeight > IMAGE_MAX_SIZE || o.outWidth > IMAGE_MAX_SIZE) {
		            scale = (int)Math.pow(2, (int) Math.round(Math.log(IMAGE_MAX_SIZE / (double) Math.max(o.outHeight, o.outWidth)) / Math.log(0.5)));
		        }

		        BitmapFactory.Options o2 = new BitmapFactory.Options();
		        o2.inSampleSize = scale;
		        o2.inPurgeable = true;
		        o2.inInputShareable = true;
		        in = imageView.getContext().getContentResolver().openInputStream(uri);
		        Bitmap b = BitmapFactory.decodeStream(in, null, o2);
		        
		        drawable = new BitmapDrawable(b);
			} catch (FileNotFoundException e) {
				
				Log.d("GlobalVariables", "local_store was not found: " + local_store);
				WatermarkCache.getInstance(imageView.getContext().getApplicationContext().getResources());
				
				drawable = WatermarkCache.getWatermark(width);

			} catch (IOException e) {
				
				WatermarkCache.getInstance(imageView.getContext().getApplicationContext().getResources());
				
				drawable = WatermarkCache.getWatermark(width);
				
			}
		}
		
		imageLoader.displayImage(url, imageView, options, drawable);
	}
	
	public Bitmap getThumbnailBitmap(String thumbnailUrl)
	{
		Bitmap bitmap = null;
		
		ArrayList<String> urls = new ArrayList<String>(imageLoader.getMemoryCache().keys());
		
		for (String url : urls)
		{
			if (url.contains(thumbnailUrl))
			{
				bitmap = imageLoader.getMemoryCache().get(url);
			}
		}
		
		return bitmap;
	}
	
	public ArrayList<Bitmap> getLatestFourBitmapsInMemory(Context context, Integer eventId)
	{
		DatabaseWrapper dbWrapper = new DatabaseWrapper(context.getApplicationContext());
		
		ArrayList<PhotoItem> photos = new ArrayList<PhotoItem>(dbWrapper.getPhotosDescending(eventId));
		
		ArrayList<String> urls = new ArrayList<String>(imageLoader.getMemoryCache().keys());
		
		ArrayList<Bitmap> bitmaps = new ArrayList<Bitmap>();
		
		for (PhotoItem photo : photos)
		{
			String thumbnailUrl = getAWSUrlThumbnail(photo);
			
			for (String url : urls)
			{
				if (url.contains(thumbnailUrl))
				{
					Bitmap bitmap = imageLoader.getMemoryCache().get(url);
					if (bitmap != null)
					{
						bitmaps.add(bitmap);
					}
					break;
				}
			}
			
			if (bitmaps.size() > 3)
			{
				break;
			}
		}
		
		return bitmaps;
	}
	
	public int getDisplayHeight()
	{
		return this.DISPLAY_HEIGHT;
	}
	
	public Display getDisplay()
	{
		return this.display;
	}

	public Typeface getHelveticaNeueRegularFont() 
	{
		return helveticaNeueRegularFont;
	}

	public void setHelveticaNeueRegularFont(Typeface helveticaNeueRegularFont) 
	{
		this.helveticaNeueRegularFont = helveticaNeueRegularFont;
	}

	public Typeface getHelveticaNeueBoldFont() 
	{
		return helveticaNeueBoldFont;
	}

	public void setHelveticaNeueBoldFont(Typeface helveticaNeueBoldFont) 
	{
		this.helveticaNeueBoldFont = helveticaNeueBoldFont;
	}

	/**
	 * @return the facebook
	 */
	public Facebook getFacebook() {
		return facebook;
	}

	/**
	 * @param facebook the facebook to set
	 */
	public void setFacebook(Facebook facebook) {
		this.facebook = facebook;
	}

	public void setMenuButtonsHeight(int height) {
		menuButtonsHeight = height;
		
	}
	
	public int getMenuButtonsHeight()
	{
		return menuButtonsHeight;
	}
}
