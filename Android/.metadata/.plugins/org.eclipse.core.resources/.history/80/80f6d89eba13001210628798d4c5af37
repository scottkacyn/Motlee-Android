package com.motlee.android.layouts;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.view.Display;
import android.view.View;
import android.view.WindowManager;
import android.widget.LinearLayout;

/* 

	This class overrides the LinearLayout allowing us to scale a 
	background drawable before it is set as a background for a 
	LinearLayout. This will allow us to use background images of 
	a "source" size and let the program scale it to our needs.

*/

public class RatioBackgroundLinearLayout extends LinearLayout {

	private final Context context;
	
	public RatioBackgroundLinearLayout(Context context, AttributeSet attrs) {
		super(context, attrs);
		
		this.context = context;
	}

	public RatioBackgroundLinearLayout(Context context) {
		super(context);
		
		this.context = context;
	}
	
	@Override
	public void setBackgroundDrawable(Drawable drawable)
	{		
		super.setBackgroundDrawable(scaleBackgroundImage(drawable));
	}
	
	// Scale image preserving Aspect Ratio to the screen's width
	
	private Drawable scaleBackgroundImage(Drawable drawable)
	{
		Bitmap bitmap = ((BitmapDrawable) drawable).getBitmap();
		
		Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay(); 
		int width = display.getWidth(); 
		
		float scaleFactor = ((float) width) / bitmap.getWidth();

		Matrix scale = new Matrix();
		scale.postScale(scaleFactor, scaleFactor);
		
		Drawable d = new BitmapDrawable(getResources(), Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), scale, false));
		
		return d;
	}
}
