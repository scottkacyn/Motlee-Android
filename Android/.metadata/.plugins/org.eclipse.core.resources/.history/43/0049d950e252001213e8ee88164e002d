package com.motlee.android.adapter;

import java.sql.SQLException;
import java.util.ArrayList;

import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Filter;
import android.widget.ImageView;
import android.widget.TextView;

import com.emilsjolander.components.StickyListHeaders.StickyListHeadersBaseAdapter;
import com.motlee.android.R;
import com.motlee.android.database.DatabaseHelper;
import com.motlee.android.layouts.HorizontalRatioLinearLayout;
import com.motlee.android.object.DrawableCache;
import com.motlee.android.object.EventDetail;
import com.motlee.android.object.GlobalEventList;
import com.motlee.android.object.GlobalVariables;
import com.motlee.android.object.UserInfo;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.ImageScaleType;
import com.nostra13.universalimageloader.core.display.SimpleBitmapDisplayer;

public class SearchAllAdapter extends StickyListHeadersBaseAdapter {

	private ArrayList<Integer> mListItemsOriginal;
	private ArrayList<Integer> mListItems;
	private Integer mSplitSectionOriginal;
	private Integer mSplitSection;
	private LayoutInflater inflater;
	
    private ImageLoader imageDownloader;
    private DisplayImageOptions mOptions;
    
    private Filter mFilter;
    private Object mLock = new Object();
    
    private DatabaseHelper helper;
	
	public SearchAllAdapter(Context context, LayoutInflater inflater, ArrayList<Integer> listItems, int splitSection) {
		super(context);
		
		mListItemsOriginal = new ArrayList<Integer>(listItems);
		mListItems = new ArrayList<Integer>();
		mSplitSectionOriginal = splitSection;
		mSplitSection = splitSection;
		
		helper = new DatabaseHelper(context.getApplicationContext());
		
		this.inflater = inflater;
		
		ImageScaleType ist = ImageScaleType.IN_SAMPLE_POWER_OF_2;
		
		mOptions = new DisplayImageOptions.Builder()
		.showStubImage(R.drawable.stub_image)
		.resetViewBeforeLoading()
		.cacheInMemory()
		.imageScaleType(ist)
		.cacheOnDisc()
		.displayer(new SimpleBitmapDisplayer())
		.build();
		
		imageDownloader = ImageLoader.getInstance();
    	
    	imageDownloader.init(ImageLoaderConfiguration.createDefault(context));
	}

	public int getCount() {
		return mListItems.size();
	}

	public Object getItem(int position) {
		
		return mListItems.get(position);
	}

	public long getItemId(int position) {
		return position;
	}

	@Override
	public View getHeaderView(int position, View convertView) {
		
		HeaderViewHolder holder = new HeaderViewHolder();
    	
    	if (convertView == null) {
    		convertView = (View) this.inflater.inflate(R.layout.search_category_bar, null);
            holder.category_title = (TextView) convertView.findViewById(R.id.category_text);
            convertView.setTag(holder);
        }
    	else
    	{
    		holder = (HeaderViewHolder) convertView.getTag();
    	}
    	
    	holder.category_title.setTypeface(GlobalVariables.getInstance().getHelveticaNeueBoldFont());
    	if (position < mSplitSection)
    	{
    		holder.category_title.setText("People");
    	}
    	else
    	{
    		holder.category_title.setText("Events");
    	}
    	
    	return convertView;
	}

	private class HeaderViewHolder
	{
		TextView category_title;
	}
	
	@Override
	public long getHeaderId(int position) {

		if (position < mSplitSection)
		{
			return 0;
		}
		else
		{
			return 1;
		}
	}

	@Override
	protected View getView(int position, View convertView) {

			EventViewHolder holder = new EventViewHolder();
			
            if (convertView == null) 
            {
            	Log.w(this.toString(), "inflating resource: " + R.layout.search_event_item);
            	
                convertView = setEventViewHolder(holder);
            } 
            else 
            {
            	holder = (EventViewHolder) convertView.getTag();
            }
            
            if (convertView.getBackground() == null)
            {
            	convertView.setBackgroundDrawable(DrawableCache.getDrawable(R.drawable.label_button_no_arrow, GlobalVariables.DISPLAY_WIDTH).getDrawable());
            }
            
            if (position < this.mSplitSection)
            {
            	UserInfo userInfo = helper.getUserDao().queryForId(this.mListItems.get(position));
            			               
                convertView.setContentDescription(Integer.toString(userInfo.uid));
                
                holder.search_event_name.setText(userInfo.name);
                holder.search_event_name.setTypeface(GlobalVariables.getInstance().getHelveticaNeueBoldFont());
                holder.search_attendee_count.setText("");
                holder.search_button.setContentDescription(Integer.toString(userInfo.uid));
                holder.search_button.setTag(userInfo);
                holder.search_event_picture.setMaxHeight(DrawableCache.getDrawable(R.drawable.label_button_no_arrow, GlobalVariables.DISPLAY_WIDTH).getHeight());
                
                imageDownloader.displayImage(GlobalVariables.getInstance().getFacebookPictureUrl(userInfo.uid), holder.search_event_picture, mOptions);
	            
            }
            else
            {

                EventDetail event = GlobalEventList.eventDetailMap.get(this.mListItems.get(position));
            	
	            convertView.setContentDescription(event.getEventID().toString());
	            
	            holder.search_button.setContentDescription(event.getEventID().toString());
	            holder.search_button.setTag(event);
	            
	            holder.search_event_picture.setMaxHeight(DrawableCache.getDrawable(R.drawable.label_button_no_arrow, GlobalVariables.DISPLAY_WIDTH).getHeight());
	            
	            if (event.getImages().size() > 0)
	            {
	            	GlobalVariables.getInstance().downloadImage(holder.search_event_picture, GlobalVariables.getInstance().getAWSUrlThumbnail(event.getImages().get(0)));
	            }
	            else
	            {
	            	holder.search_event_picture.setImageDrawable(getContext().getResources().getDrawable(R.drawable.watermark));
	            }
	            
	            holder.search_event_name.setText(event.getEventName());
	            holder.search_event_name.setTypeface(GlobalVariables.getInstance().getHelveticaNeueBoldFont());
	            
	            holder.search_attendee_count.setText(event.getAttendeeCount() + " Attendees");
	            holder.search_attendee_count.setTypeface(GlobalVariables.getInstance().getHelveticaNeueBoldFont());
            }

		return convertView;
	}


	private View setEventViewHolder(EventViewHolder eventHolder) {
		View convertView;
		
		convertView = this.inflater.inflate(R.layout.search_event_item, null);
		
		eventHolder.search_event_picture = (ImageView) convertView.findViewById(R.id.search_event_picture);
		eventHolder.search_event_name = (TextView) convertView.findViewById(R.id.search_event_name);
		eventHolder.search_attendee_count = (TextView) convertView.findViewById(R.id.search_attendee_count);
		eventHolder.search_button = convertView.findViewById(R.id.search_button);
		
		convertView.setTag(eventHolder);
		return convertView;
	}
	
	private class EventViewHolder
	{
		public ImageView search_event_picture;
		public TextView search_event_name;
		public TextView search_attendee_count;
		public View search_button;
	}
	
    public Filter getFilter() {
        // TODO Auto-generated method stub
        if (mFilter == null) {
            mFilter = new CustomFilter();
        }
        return mFilter;
    }


    private class CustomFilter extends Filter {
        @Override
        protected FilterResults performFiltering(CharSequence prefix) {
            FilterResults results = new FilterResults();
            Log.d("bajji", "its ---> " + prefix);

            if (prefix == null || prefix.toString().trim().length() == 0) {
            	ArrayList<Integer> list;
                synchronized (mLock) {
                    list = new ArrayList<Integer>();
                }
                results.values = list;
                results.count = list.size();
            } else {
                String searchString = prefix.toString();

                ArrayList<Integer> values;
                synchronized (mLock) {
                    values = new ArrayList<Integer>(mListItemsOriginal);
                }

                final int count = values.size();
                final ArrayList<Integer> newValues = new ArrayList<Integer>();

                int newSplitSection = 0;
                for (int i = 0; i < count; i++) {
                    final Integer value = values.get(i);
                    
                    String valueText = null;
					if (i < mSplitSectionOriginal)
					{
						UserInfo user = null;
						try {
							user = helper.getUserDao().queryForId(value);
						} catch (SQLException e) {
							Log.e("DatabaseHelper", "Failed to queryForId for user", e);
						}
						
						valueText = user.name;
					}
					else
					{
						valueText = GlobalEventList.eventDetailMap.get(value).getEventName();
					}
                    
                    // First match against the whole, non-splitted value
                    if (valueText.matches("(?i).*" + searchString + ".*")) {
                        newValues.add(value);
                        if (i < mSplitSectionOriginal)
                        {
                        	newSplitSection = newValues.size();
                        }
                    } 
                }
                results.values = newValues;
                results.count = newValues.size();
                mSplitSection = newSplitSection;
            }
            return results;
        }
        @Override
        protected void publishResults(CharSequence constraint, FilterResults results) {
            //noinspection unchecked
        	synchronized (mLock)
        	{
	            mListItems = (ArrayList<Integer>) results.values;
	            Log.d(this.toString(), "About to notify mData");
	            notifyDataSetChanged();
        	}
        	
        }
    }
}
