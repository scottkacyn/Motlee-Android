package com.motlee.android.fragment;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;

import android.annotation.SuppressLint;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.http.AndroidHttpClient;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.UiSettings;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.MarkerOptions;
import com.motlee.android.R;
import com.motlee.android.database.DatabaseWrapper;
import com.motlee.android.fragment.PhotoMapFragment.BitmapDownloaderTask;
import com.motlee.android.object.DrawableCache;
import com.motlee.android.object.EventDetail;
import com.motlee.android.object.GlobalVariables;
import com.motlee.android.object.LocationInfo;
import com.motlee.android.object.PhotoItem;

public class NearbyEventsFragment extends SupportMapFragment {

private DatabaseWrapper dbWrapper;
	
	private ArrayList<EventDetail> mEventList = new ArrayList<EventDetail>();
	
	private PhotoDistance photoDistance;
	
	@Override
	public void onResume()
	{
		super.onResume();
		
		//setMapOverlays();
	}
	
	public NearbyEventsFragment()
	{
		super();
	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
	{
		final View view = super.onCreateView(inflater, container, savedInstanceState);
		
		dbWrapper = new DatabaseWrapper(getActivity().getApplicationContext());
		
		photoDistance = new PhotoDistance(); 
		
	    if (view.getViewTreeObserver().isAlive()) {
	    	view.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
	            @SuppressLint("NewApi") // We check which build version we are using.
	            
	            public void onGlobalLayout() {
	                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
	                  view.getViewTreeObserver().removeGlobalOnLayoutListener(this);
	                } else {
	                  view.getViewTreeObserver().removeOnGlobalLayoutListener(this);
	                }
	                if (photoDistance.getGreatestDistance() > 2)
	                {
	                	getMap().moveCamera(CameraUpdateFactory.newLatLngBounds(photoDistance.getLatLngBounds(), 100));
	                }
	            }
	        });
	    }
		
		initMap();
		
		return view;
	}
	
	private class PhotoDistance
	{		
		private double maxLat = -200;
		private double maxLon = -200;
		private double minLat = -200;
		private double minLon = -200;
		
		private LatLngBounds.Builder latLngBounds = new LatLngBounds.Builder();
		
		private static final double R = 6371;
		
		public LatLng getMidPoint()
		{
			if (minLat != maxLat || minLon != maxLon)
			{
				Log.d("PhotoMap", "maxLat: " + maxLat + ", minLon: " + minLon + ", minLat: " + minLat + ", maxLon: " + maxLon);
				
				double lat1 = Math.toRadians(maxLat);
				double lon1 = Math.toRadians(minLon);
				double lat2 = Math.toRadians(minLat);
				double lon2 = Math.toRadians(maxLon);
				
				double dLon = Math.toRadians(maxLon - minLon);
				
				double bx = Math.cos(lat2) * Math.cos(dLon);
				double by = Math.cos(lat2) * Math.sin(dLon);
				
				double lat = Math.atan2(Math.sin(lat1) + Math.sin(lat2), Math.sqrt((Math.cos(lat1) + bx) * (Math.cos(lat1) + bx) + by*by));
				double lon = lon1 + Math.atan2(by, Math.cos(lat1) + bx);
				
				return new LatLng(Math.toDegrees(lat), Math.toDegrees(lon));
			}
			else
			{
				return new LatLng(maxLat, maxLon); 
			}
		}
		
		public void calculateBounds(EventDetail event)
		{
			latLngBounds.include(new LatLng(event.lat, event.lon));
			
			//Initialize
			if (maxLat == -200 && maxLon == -200 && minLat == -200 && minLon == -200)
			{
				maxLat = event.lat;
				maxLon = event.lon;
				minLat = event.lat;
				minLon = event.lon;
			}
			else
			{
				if (event.lat > maxLat)
				{
					maxLat = event.lat;
				}
				if (event.lon > maxLon)
				{
					maxLon = event.lon;
				}
				if (event.lat < minLat)
				{
					minLat = event.lat;
				}
				if (event.lon < minLon)
				{
					minLon = event.lon;
				}
			}
		}
		
		public LatLngBounds getLatLngBounds()
		{
			return latLngBounds.build();
		}
		
		public double getGreatestDistance()
		{
			double dLat = Math.toDegrees(maxLat - minLat);
			double dLon = Math.toDegrees(minLon - maxLon);
			
			double a = 
					Math.sin(dLat / 2) * Math.sin(dLat / 2) + 
					Math.cos(Math.toDegrees(maxLat)) * Math.cos(Math.toDegrees(minLat)) *
					Math.sin(dLon / 2) * Math.sin(dLon / 2);
			
			double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
			double d = R * c;
			return d;
		}
	}
	
	private void initMap() {
				
		photoDistance = new PhotoDistance();
		
    	LocationInfo myLocation = GlobalVariables.getInstance().getLocationInfo();
    	
    	LatLng position = new LatLng(myLocation.lat, myLocation.lon);

    	UiSettings uiSettings = getMap().getUiSettings();
    	
    	uiSettings.setCompassEnabled(false);
    	uiSettings.setRotateGesturesEnabled(false);
    	uiSettings.setTiltGesturesEnabled(false);
    	uiSettings.setZoomControlsEnabled(false);
		
		if (mEventList.size() > 0)
		{
			//ArrayList<PhotoItem> photoWithLocation = new ArrayList<PhotoItem>();
			
			int count = 0;
			
			for (EventDetail event : mEventList)
			{
				if ((event.lat != 0 && event.lon != 0) && (event.lat != -1.0 && event.lon != -1.0))
				{
					PhotoItem photo = dbWrapper.getMostRecentPhoto(event.getEventID());
					Log.d("PhotoMap", "photo.lat: " + event.lat + ", photo.lon: " + event.lon);
					count++;
					photoDistance.calculateBounds(event);
					BitmapDownloaderTask task = new BitmapDownloaderTask(event);
					if (photo != null)
					{
						task.execute(GlobalVariables.getInstance().getAWSUrlThumbnail(photo));
					}
					else
					{
						task.execute("");
					}
				}
			}
			
			Log.d("PhotoMap", "count: " + count);
			
			getMap().moveCamera(CameraUpdateFactory.newLatLngZoom(position, 14));
		}
		else
		{
			Log.d("PhotoMap", "Center Lat: " + position.latitude + ", Lon: " + position.longitude);
			getMap().moveCamera(CameraUpdateFactory.newLatLngZoom(position, 14));
		}
		
	}
	
    Bitmap downloadBitmap(String url) {
        final int IO_BUFFER_SIZE = 4 * 1024;

        // AndroidHttpClient is not allowed to be used from the main thread
        final HttpClient client = AndroidHttpClient.newInstance("Android");
        final HttpGet getRequest = new HttpGet(url);

        try {
            HttpResponse response = client.execute(getRequest);
            final int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                Log.w("ImageDownloader", "Error " + statusCode +
                        " while retrieving bitmap from " + url);
                return null;
            }

            final HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream inputStream = null;
                try {
                    inputStream = entity.getContent();
                    // return BitmapFactory.decodeStream(inputStream);
                    // Bug on slow connections, fixed in future release.
                    Bitmap bitmap = BitmapFactory.decodeStream(inputStream);
                    return Bitmap.createScaledBitmap(bitmap, DrawableCache.convertDpToPixel(50), DrawableCache.convertDpToPixel(50), false);
                } finally {
                    if (inputStream != null) {
                        inputStream.close();
                    }
                    entity.consumeContent();
                }
            }
        } catch (IOException e) {
            getRequest.abort();
            Log.w("ImageDownloader", "I/O error while retrieving bitmap from " + url, e);
        } catch (IllegalStateException e) {
            getRequest.abort();
            Log.w("ImageDownloader", "Incorrect URL: " + url);
        } catch (Exception e) {
            getRequest.abort();
            Log.w("ImageDownloader", "Error while retrieving bitmap from " + url, e);
        } finally {
            if ((client instanceof AndroidHttpClient)) {
                ((AndroidHttpClient) client).close();
            }
        }
        return null;
    }
	
    /**
     * The actual AsyncTask that will asynchronously download the image.
     */
    class BitmapDownloaderTask extends AsyncTask<String, Void, Bitmap> {
        private String url;
        private EventDetail event;

        public BitmapDownloaderTask(EventDetail event) {
        	this.event = event;
        }

        /**
         * Actual download method.
         */
        @Override
        protected Bitmap doInBackground(String... params) {
            url = params[0];
            return downloadBitmap(url);
        }

        /**
         * Once the image is downloaded, associates it to the imageView
         */
        @Override
        protected void onPostExecute(Bitmap bitmap) {
            if (isCancelled()) {
                bitmap = null;
            }

            //addBitmapToCache(url, bitmap);
            
            if (bitmap != null)
            {
            	if (getMap() != null)
            	{
	            	getMap().addMarker(new MarkerOptions()
	            	.position(new LatLng(event.lat, event.lon))
	            	.title(event.getEventName())
	            	.snippet(dbWrapper.getAttendees(event.getEventID()).size() + " attendees")
	            	.draggable(false)
	            	.icon(BitmapDescriptorFactory.fromBitmap(bitmap)));
            	}
            }
            else
            {
            	if (getMap() != null)
            	{
	            	getMap().addMarker(new MarkerOptions()
	            	.position(new LatLng(event.lat, event.lon))
	            	.title(event.getEventName())
	            	.snippet(dbWrapper.getAttendees(event.getEventID()).size() + " attendees")
	            	.draggable(false)
	            	.icon(BitmapDescriptorFactory.fromResource(R.drawable.map_pin_for_google))
	            	.anchor(0.5f, 1f));
            	}
            }
        }
    }

	public void addEventDetail(EventDetail eDetail) {
		
		mEventList.add(eDetail);
	}
	
}
