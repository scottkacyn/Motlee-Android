package com.motlee.android.fragment;

import greendroid.widget.PagedView;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.text.InputType;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.inputmethod.InputMethodManager;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView.OnEditorActionListener;
import android.widget.TextView;

import com.motlee.android.R;
import com.motlee.android.adapter.CommentAdapter;
import com.motlee.android.adapter.PhotoDetailPagedViewAdapter;
import com.motlee.android.enums.EventItemType;
import com.motlee.android.layouts.RatioBackgroundRelativeLayout;
import com.motlee.android.layouts.StretchedBackgroundLinearLayout;
import com.motlee.android.layouts.StretchedBackgroundRelativeLayout;
import com.motlee.android.layouts.StretchedBackgroundTableLayout;
import com.motlee.android.object.Comment;
import com.motlee.android.object.DateStringFormatter;
import com.motlee.android.object.DrawableCache;
import com.motlee.android.object.DrawableWithHeight;
import com.motlee.android.object.EventDetail;
import com.motlee.android.object.EventItem;
import com.motlee.android.object.GlobalEventList;
import com.motlee.android.object.GlobalVariables;
import com.motlee.android.object.Like;
import com.motlee.android.object.LocationInfo;
import com.motlee.android.object.PhotoItem;
import com.motlee.android.object.StoryItem;
import com.motlee.android.object.UserInfoList;
import com.motlee.android.object.event.UpdatedLikeEvent;
import com.nostra13.universalimageloader.core.assist.FailReason;
import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;

public class EventItemDetailFragment extends BaseMotleeFragment {
	
	private LinearLayout headerView;
	private View view;
	private LayoutInflater inflater;
	private String pageTitle = "All Events";
	
	private EventItem eventItem;
	
	private EditText editText;
	
	private boolean isPhotoDetail = false;
	private boolean isStoryDetail = false;
	
	private ImageView photo;
	private RelativeLayout story;
	private View touchOverlay;
	
	private TextView likeText;
	private TextView commentText;
	private ImageButton thumbIcon;
	private ListView commentList;
	private CommentAdapter adapter;
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, 
	        Bundle savedInstanceState)
	{
	
		this.inflater = inflater;

		view = this.inflater.inflate(R.layout.paged_view_layout, null);
		
		PagedView pagedView = (PagedView) view.findViewById(R.id.comment_paged_view);
		
		ArrayList<PhotoItem> photos = GlobalEventList.eventDetailMap.get(eventItem.event_id).getImages();
		
		Collections.sort(photos);
		
		int index = photos.indexOf(eventItem);
		
		PhotoDetailPagedViewAdapter adapter = new PhotoDetailPagedViewAdapter(getActivity(), photos);
		
		pagedView.setAdapter(adapter);
		
		pagedView.scrollToPage(index);
		
		setPageHeader(GlobalEventList.eventDetailMap.get(eventItem.event_id).getEventName());
		showLeftHeaderButton();
		
		setEditText();
		
		return view;
	}
	
	/*@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, 
	        Bundle savedInstanceState)
	{
	
		this.inflater = inflater;
		headerView = (LinearLayout) this.inflater.inflate(R.layout.event_item_detail, null);

		view = this.inflater.inflate(R.layout.activity_photo_detail, null);
		
		//int pixels = DrawableCache.convertDpToPixel(5);
		
		//headerView.setPadding(0, pixels, 0, 0);
		
		/*FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);
		params.setMargins(0, (int) (GlobalVariables.DISPLAY_WIDTH * .15), 0, 0);
		
		//headerView.findViewById(R.id.photo_container).setPadding(pixels, (int) (GlobalVariables.DISPLAY_WIDTH * .075), pixels, pixels);
		
		touchOverlay = headerView.findViewById(R.id.photo_detail_touch_overlay);
		touchOverlay.setBackgroundDrawable(DrawableCache.getDrawable(R.drawable.photo_detail_overlay, GlobalVariables.DISPLAY_WIDTH).getDrawable());
		
		setPageHeader(GlobalEventList.eventDetailMap.get(eventItem.event_id).getEventName());
		showLeftHeaderButton();
		
		setUpPage();
		
		setEditText();
		
		commentList = (ListView) view.findViewById(R.id.comment_list_view);
		
		commentList.addHeaderView(headerView);
		
		//commentList.setPadding(pixels, (int) (GlobalVariables.DISPLAY_WIDTH * .075), pixels, pixels);
		
		Collections.sort(eventItem.comments);
		
		adapter = new CommentAdapter(getActivity(), R.layout.comment_list_item, eventItem.comments);
		
		commentList.setAdapter(adapter);
		
		return view;
	}*/
	
	/*private void setUpPage() {
		
		photo = (ImageView) headerView.findViewById(R.id.photo_detail_picture);
		story = (RelativeLayout) headerView.findViewById(R.id.photo_detail_story);
		
		story.setBackgroundDrawable(DrawableCache.getDrawable(R.drawable.story_detail_background, GlobalVariables.DISPLAY_WIDTH).getDrawable());
		
		LocationInfo location = null;
		
		View tempView = null;
		
		if (isPhotoDetail)
		{
			tempView = photo;
			photo.setVisibility(View.VISIBLE);
			GlobalVariables.getInstance().downloadImage(photo, GlobalVariables.getInstance().getAWSUrlCompressed((PhotoItem)eventItem));
			story.setVisibility(View.GONE);
			location = ((PhotoItem) eventItem).location;
			
			TextView textView = (TextView) touchOverlay.findViewById(R.id.photo_detail_description);
			textView.setTypeface(GlobalVariables.getInstance().getHelveticaNeueBoldFont());
			textView.setText(((PhotoItem) eventItem).caption);
			
			tempView.setClickable(true);
			tempView.setOnClickListener(new OnClickListener(){

				public void onClick(View v) {
					
					if (touchOverlay.getVisibility() == View.GONE)
					{
						touchOverlay.setVisibility(View.VISIBLE);
					}
					else
					{
						touchOverlay.setVisibility(View.GONE);
					}
				}
			});
		}
		if (isStoryDetail)
		{
			tempView = story;
			
			TextView storyText = (TextView) story.findViewById(R.id.photo_detail_story_text);
			storyText.setTypeface(GlobalVariables.getInstance().getHelveticaNeueBoldFont());
			storyText.setText(((StoryItem) eventItem).body);
			
			story.setVisibility(View.VISIBLE);
			photo.setVisibility(View.GONE);
			location = new LocationInfo();
		}

		DrawableWithHeight background = DrawableCache.getDrawable(R.drawable.photo_detail_rect, GlobalVariables.DISPLAY_WIDTH);
		
		//((RelativeLayout) headerView.findViewById(R.id.photo_detail_user_row)).setBackgroundDrawable(background.getDrawable());
		
		ImageView profilePic = (ImageView) headerView.findViewById(R.id.photo_detail_thumbnail);
		profilePic.setTag(UserInfoList.getInstance().get(eventItem.user_id));
		
		profilePic.setMaxHeight((int) background.getHeight());
		profilePic.setMaxWidth((int) background.getWidth());
		
		ImageView profileBg = (ImageView) headerView.findViewById(R.id.photo_detail_thumbnail_bg);
		profileBg.setMaxHeight((int) background.getHeight());
		profileBg.setMaxWidth((int) background.getWidth());
		
		Integer facebookID = UserInfoList.getInstance().get(eventItem.user_id).uid;
		
		GlobalVariables.getInstance().downloadImage(profilePic, GlobalVariables.getInstance().getFacebookPictureUrlLarge(facebookID));
		
		TextView userName = (TextView) headerView.findViewById(R.id.photo_detail_name_text);
		userName.setTypeface(GlobalVariables.getInstance().getHelveticaNeueBoldFont());
		userName.setText(UserInfoList.getInstance().get(eventItem.user_id).name);
		userName.setTag(UserInfoList.getInstance().get(eventItem.user_id));
		
		TextView time = (TextView) headerView.findViewById(R.id.photo_detail_time_text);
		time.setTypeface(GlobalVariables.getInstance().getHelveticaNeueBoldFont());
		time.setText(DateStringFormatter.getPastDateString(eventItem.created_at));
		
		setUpLikeInfo();
		
		//headerView.findViewById(R.id.photo_detail_comment_bar).setVisibility(View.GONE);
	}*/
	
	public String getCommentText()
	{
		return editText.getText().toString();
	}
	
	private void setEditText()
	{
		editText = (EditText) view.findViewById(R.id.comment_text);
		editText.setTypeface(GlobalVariables.getInstance().getHelveticaNeueBoldFont());
		editText.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES|InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE);
		InputMethodManager in = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);

        in.hideSoftInputFromWindow(editText.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
		
		editText.clearFocus();
		
		editText.setOnEditorActionListener(editorActionListener);
		editText.setOnFocusChangeListener(focusChangeListener);
		
	}
	
	private OnFocusChangeListener focusChangeListener = new OnFocusChangeListener(){
		// if we have focus, change color for input text
        public void onFocusChange(View v, boolean hasFocus) {
            if (hasFocus) {
                ((EditText) v).setTextColor(Color.WHITE);
                ((EditText) v).setTypeface(GlobalVariables.getInstance().getHelveticaNeueBoldFont());
            } 
        }
	};
	
	private OnEditorActionListener editorActionListener = new OnEditorActionListener(){
		
		public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
			
			// if we hit enter on the keyboard, hide keyboard
            if (event != null&& (event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) {
                InputMethodManager in = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);

                // NOTE: In the author's example, he uses an identifier
                // called searchBar. If setting this code on your EditText
                // then use v.getWindowToken() as a reference to your 
                // EditText is passed into this callback as a TextView

                in.hideSoftInputFromWindow(editText.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
                editText.clearFocus();
                
               return true;

            }
            return false;
		}
		
	};

	public void removeTextAndKeyboard() {
		
        InputMethodManager in = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
        in.hideSoftInputFromWindow(editText.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
		
        editText.setText("");
	}
	public void setUpLikeInfo()
	{
		TextView text = (TextView) headerView.findViewById(R.id.photo_detail_like_button_text);
		text.setTypeface(GlobalVariables.getInstance().getHelveticaNeueBoldFont());
		
		text = (TextView) headerView.findViewById(R.id.photo_detail_likes_text);
		text.setTypeface(GlobalVariables.getInstance().getHelveticaNeueBoldFont());
		if (eventItem.likes.size() > 0)
		{
			headerView.findViewById(R.id.photo_detail_likes).setVisibility(View.VISIBLE);
			text.setText(Integer.toString(eventItem.likes.size()));
			boolean hasLiked = false;
			for (Like like : eventItem.likes)
			{
				if (like.user_id == GlobalVariables.getInstance().getUserId())
				{
					hasLiked = true;
				}
			}
			if (hasLiked)
			{
				((ImageView) headerView.findViewById(R.id.photo_detail_thumb_image)).setPressed(true);
				text = (TextView) headerView.findViewById(R.id.photo_detail_like_button_text);
				text.setText("Unlike");
				headerView.findViewById(R.id.photo_detail_like_button).setTag(true);
			}
			else
			{
				((ImageView) headerView.findViewById(R.id.photo_detail_thumb_image)).setPressed(false);
				text = (TextView) headerView.findViewById(R.id.photo_detail_like_button_text);
				text.setText("Like");
				headerView.findViewById(R.id.photo_detail_like_button).setTag(false);
			}
		}
		else
		{
			headerView.findViewById(R.id.photo_detail_likes).setVisibility(View.GONE);
			text = (TextView) headerView.findViewById(R.id.photo_detail_like_button_text);
			text.setText("Like");
			headerView.findViewById(R.id.photo_detail_like_button).setTag(false);
		}
		
		/*text = (TextView) headerView.findViewById(R.id.photo_detail_comment_text);
		text.setTypeface(GlobalVariables.getInstance().getHelveticaNeueBoldFont());
		if (eventItem.comments.size() > 0)
		{
			headerView.findViewById(R.id.photo_detail_comments).setVisibility(View.VISIBLE);
			text.setText(Integer.toString(eventItem.comments.size()));
		}
		else
		{
			headerView.findViewById(R.id.photo_detail_comments).setVisibility(View.GONE);
		}*/
	}
	
	public void setDetailImage(PhotoItem photoItem)
	{
		this.eventItem = photoItem;
		this.isPhotoDetail = true;
		this.isStoryDetail = false;
	}
	
	public void setDetailStory(StoryItem storyItem)
	{
		this.eventItem = storyItem;
		this.isPhotoDetail = false;
		this.isStoryDetail = true;
	}

	public void refreshLikes(int numOfLikes) {
		
		likeText.setText(Integer.toString(numOfLikes));
		
	}
	
	public void refreshComments(int numOfComments)
	{
		commentText.setText(Integer.toString(numOfComments));
	}

	public void setThumbButtonPressed(boolean b) {
		
		thumbIcon.setPressed(b);
		
	}

	public void setThumbButtonEnabled(boolean b) {
		
		thumbIcon.setEnabled(b);
		
	}

	public void refreshLikes(ArrayList<Like> likes) {
		
		likeText.setText(Integer.toString(likes.size()));
		
		for (Like like : likes)
		{
			if (like.user_id == GlobalVariables.getInstance().getUserId())
			{
				thumbIcon.setPressed(true);
			}
		}
	}

	public void unlike() {

		TextView buttonText = (TextView) headerView.findViewById(R.id.photo_detail_like_button_text);
		buttonText.setText("Like");
		headerView.findViewById(R.id.photo_detail_like_button).setTag(false);
		
		if (eventItem.likes.size() == 0)
		{
			headerView.findViewById(R.id.photo_detail_likes).setVisibility(View.GONE);
		}
		else
		{
			headerView.findViewById(R.id.photo_detail_likes).setVisibility(View.VISIBLE);
			TextView likeText = (TextView) headerView.findViewById(R.id.photo_detail_likes_text);
			likeText.setText(Integer.toString(eventItem.likes.size()));
		}
	}

	public void like() {
		
		TextView buttonText = (TextView) headerView.findViewById(R.id.photo_detail_like_button_text);
		buttonText.setText("Unlike");
		headerView.findViewById(R.id.photo_detail_like_button).setTag(true);

		headerView.findViewById(R.id.photo_detail_likes).setVisibility(View.VISIBLE);
		TextView likeText = (TextView) headerView.findViewById(R.id.photo_detail_likes_text);
		likeText.setText(Integer.toString(eventItem.likes.size()));
		
	}

	public void addComment(Comment comment) {
		
		eventItem.comments.add(comment);
		
		Collections.sort(eventItem.comments);
		
		adapter = new CommentAdapter(getActivity(), R.layout.comment_list_item, eventItem.comments);
		
		commentList.setAdapter(adapter);
	}
}
