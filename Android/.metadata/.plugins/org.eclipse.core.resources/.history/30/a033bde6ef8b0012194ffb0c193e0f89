package com.motlee.android;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.facebook.HttpMethod;
import com.facebook.Request;
import com.facebook.Response;
import com.facebook.Session;
import com.facebook.SessionState;
import com.flurry.android.FlurryAgent;
import com.google.android.gcm.GCMRegistrar;
import com.motlee.android.adapter.EventListAdapter;
import com.motlee.android.database.DatabaseWrapper;
import com.motlee.android.fragment.BaseMotleeFragment;
import com.motlee.android.fragment.EmptyFragmentWithCallbackOnResume.OnFragmentAttachedListener;
import com.motlee.android.fragment.EmptyFragmentWithCallbackOnResume;
import com.motlee.android.fragment.EventListFragment;
import com.motlee.android.object.DrawableCache;
import com.motlee.android.object.DrawableWithHeight;
import com.motlee.android.object.EventDetail;
import com.motlee.android.object.EventListParams;
import com.motlee.android.object.EventServiceBuffer;
import com.motlee.android.object.GlobalActivityFunctions;
import com.motlee.android.object.GlobalVariables;
import com.motlee.android.object.MenuFunctions;
import com.motlee.android.object.SharePref;
import com.motlee.android.object.StopWatch;
import com.motlee.android.object.TempAttendee;
import com.motlee.android.object.UserInfo;
import com.motlee.android.object.event.UpdatedEventDetailEvent;
import com.motlee.android.object.event.UpdatedEventDetailListener;
import android.os.Bundle;
import android.os.Handler;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Typeface;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.TextView;

public class EventListActivity extends BaseMotleeActivity implements OnFragmentAttachedListener {

	private static String tag = "EventListActivity";
	
	// Fragment Tag Strings
	public static String ATTENDING = "attending";
	public static String NOT_ATTENDING = "not attending";
	public static int SPLASH_PAGE = 1;
	
	private EventListAdapter eventListAdapter;
	private EventListParams currentEventListParams = new EventListParams("All Events", EventServiceBuffer.NO_EVENT_FILTER);
	
	private EventListFragment mEventListFragment;
	
	private DatabaseWrapper dbWrapper;
	
	private Handler handler = new Handler();
	
	private StopWatch sw = new StopWatch();
	
	private boolean refreshingData = false;
	
	private boolean fragmentHasAttached = false;
	
	private boolean isReadyToCommitFragment = false;
	
	private boolean isFirstTime = false;
	
	@Override
	public void onResume()
	{		
		super.onResume();
		
        FlurryAgent.logEvent("EventList");
		
        /*
         * If this is first time and eAdapter is null, we simply
         * wait for the eAdapter to be initialized once the events
         * call is completed. 
         */
        
		if (!isFirstTime)
		{
			if (eventListAdapter != null && !needToGetAuthTokens())
			{
				refreshListData();
			}
		}
	}	
	
	private void refreshListData()
	{
		if (eventListAdapter != null && !needToGetAuthTokens())
		{
			if (eventListAdapter.getData().size() > 1)
			{
				mEventListFragment.setDoneLoading();
				mEventListFragment.hideProgressBar();
				requestNewDataForList(currentEventListParams.dataContent, currentEventListParams.headerText, false);
			}
			else if (dbWrapper.getAllEvents().size() > 0)
			{
				requestNewDataForList(currentEventListParams.dataContent, currentEventListParams.headerText, false);
			}
		}
		else
		{
	        EventServiceBuffer.setEventDetailListener(eventListener);
			
			EventServiceBuffer.getEventsFromService();
		}
	}
	
	/*
	 * (non-Javadoc)
	 * @see com.google.android.maps.MapActivity#onNewIntent(android.content.Intent)
	 * Since we have only one instance of this activity, we need to handle onNewIntent
	 * when necessary. Change in list content and start splash page.
	 */
	@Override
	public void onNewIntent(Intent intent)
	{
		
		Log.d("EventListActivity", "onNewIntent");
		
        Object eventListType = null;
        boolean startSplash = false;
        if (intent.getExtras() != null)
        {
        	eventListType = intent.getExtras().get("ListType");
        	startSplash = intent.getExtras().getBoolean("StartSplash", false);
        }
        
        if (startSplash)
        {
    		Log.d(tag, "starting splash page");
    		
    		Intent splashIntent = new Intent(EventListActivity.this, MotleeLoginActivity.class);
    		startActivityForResult(splashIntent, 0);
        }
        
        /*
         * Change event list type if necessary and update 
         * our internal event list from the server
         */
        
        if (eventListType != null)
        {
	        if (!eventListType.toString().equals(currentEventListParams.headerText))
	        {
	        	if (eventListType.toString().equals(BaseMotleeFragment.ALL_EVENTS))
	        	{
	        		requestNewDataForList(EventServiceBuffer.NO_EVENT_FILTER, BaseMotleeFragment.ALL_EVENTS, true);
	        	}
	        	else if (eventListType.toString().equals(BaseMotleeFragment.MY_EVENTS))
	        	{
	        		requestNewDataForList(EventServiceBuffer.MY_EVENTS, BaseMotleeFragment.MY_EVENTS, true);
	        	}
	        }
        }
	}
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
    	
        super.onCreate(savedInstanceState);
        
        initializeGlobalVariables();
        
        setContentView(R.layout.main);
        
        menu = GlobalActivityFunctions.setUpSlidingMenu(this);
        
        dbWrapper = new DatabaseWrapper(this.getApplicationContext());
       
        isFirstTime = true;
        
    	if (needToStartSplashPage())
    	{
    		Log.d(tag, "starting splash page");
    		
    		EventServiceBuffer.setEventDetailListener(initialEventListener);
    		
    		Intent intent = new Intent(EventListActivity.this, MotleeLoginActivity.class);
    		startActivityForResult(intent, 0);
    	}
    	else
    	{
    		/*
    		 * Opens active Facebook session if we have none
    		 */
    		
			Session.openActiveSession(this, true, new Session.StatusCallback() {
				
				public void call(Session session, SessionState state, Exception exception) {
					
					if (session.isOpened())
					{
						  String access_token = Session.getActiveSession().getAccessToken();
						  if (access_token != null)
						  {
							  Log.d("EventListActivity", "Reseting my facebook access token");
							  SharePref.setStringPref(getApplicationContext(), SharePref.ACCESS_TOKEN, access_token);
							  
							  refreshListData();
						  }
					}
					
					getFriendsFromFacebook();
					
				}
			});	 
			
			registerDevice();
			

    	}
    	
        FragmentManager     fm = getSupportFragmentManager();
        FragmentTransaction ft = fm.beginTransaction();
        
    	if (fm.findFragmentById(R.id.fragment_content) != null)
    	{
    		EventListFragment fragment = (EventListFragment) fm.findFragmentById(R.id.fragment_content);
    		Log.d("EventListActivity", "A fragment already exists: " + fragment.toString());
    		
    		ft.remove(fragment);
    	}
    	
        ft.add(new EmptyFragmentWithCallbackOnResume(), "EmptyFragment")
        .commit();
        
        mEventListFragment = new EventListFragment();
        
        ArrayList<EventDetail> events = new ArrayList<EventDetail>(dbWrapper.getAllEvents());
        
        Collections.sort(events);
        
        updateEventAdapter(events, false);
    }

	private void registerDevice() {
		
		GCMRegistrar.checkDevice(this);
		GCMRegistrar.checkManifest(this);
		final String regId = GCMRegistrar.getRegistrationId(this);
		if (regId.equals("")) {
		  GCMRegistrar.register(this, GlobalVariables.SENDER_ID);
		  Log.v("EventListActivity", "Registering Device");
		} else {
		  Log.v("EventListActivity", "Already registered");
		}
		
	}

	private void initializeGlobalVariables() {
		
		GlobalVariables instance = GlobalVariables.getInstance();
        
        EventServiceBuffer.getInstance(getApplicationContext());
        
        DrawableCache.getInstance(getResources());
        
        instance.setDisplay(getWindowManager().getDefaultDisplay()); 
        SharePref.setIntPref(getApplicationContext(), SharePref.DISPLAY_WIDTH, getWindowManager().getDefaultDisplay().getWidth());
        SharePref.setIntPref(getApplicationContext(), SharePref.DISPLAY_HEIGHT, getWindowManager().getDefaultDisplay().getHeight());
        instance.setGothamLigtFont(Typeface.createFromAsset(getAssets(), "fonts/gotham_light.ttf"));
        instance.setHelveticaNeueRegularFont(Typeface.createFromAsset(getAssets(), "fonts/helvetica_neue_bold.ttf"));
        instance.setHelveticaNeueRegularFont(Typeface.createFromAsset(getAssets(), "fonts/helvetica_neue_regular.ttf"));
        SharePref.setIntPref(getApplicationContext(), SharePref.MAX_EVENT_LIST_PHOTO_SIZE, calculateEventListImageSize());
        
        GlobalVariables.getInstance().setUpLocationListener(this);
        
        GlobalVariables.getInstance().initializeImageLoader(this);
	}
	
	public int calculateEventListImageSize()
	{
    	DrawableWithHeight whole = DrawableCache.getDrawable(R.drawable.event_list_detail_background, GlobalVariables.DISPLAY_WIDTH);
    	
    	DrawableWithHeight header = DrawableCache.getDrawable(R.drawable.event_list_detail_header_background, GlobalVariables.DISPLAY_WIDTH);
    	
    	DrawableWithHeight footer = DrawableCache.getDrawable(R.drawable.event_list_detail_footer_background, GlobalVariables.DISPLAY_WIDTH);
	
    	return whole.getHeight() - header.getHeight() - footer.getHeight();
	}
    
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent intent)
    {
        super.onActivityResult(requestCode, resultCode, intent);
        
        if (resultCode == RESULT_CANCELED)
        {
        	finish();
        }
        else
        {
        	getFriendsFromFacebook();
        	
        	SharePref.setBoolPref(getApplicationContext(), SharePref.FIRST_USE, false);
        	SharePref.setBoolPref(getApplicationContext(), SharePref.FIRST_EXPERIENCE, false);
        	
        	registerDevice();
        }

    }
    
	private boolean needToStartSplashPage() {
		return SharePref.getBoolPref(getApplicationContext(), SharePref.FIRST_USE) ||
				(SharePref.getStringPref(getApplicationContext(), SharePref.ACCESS_TOKEN) == "") ||
				(SharePref.getStringPref(getApplicationContext(), SharePref.AUTH_TOKEN) == "");
	}
	
	private boolean needToGetAuthTokens()
	{
		return (SharePref.getStringPref(getApplicationContext(), SharePref.ACCESS_TOKEN) == "") ||
				(SharePref.getStringPref(getApplicationContext(), SharePref.AUTH_TOKEN) == "");
	}

	private OnClickListener plusMenuClick = new OnClickListener(){

		public void onClick(View v) {
			
			MenuFunctions.showCreateEventPage(v, EventListActivity.this);
			
		}
		
	};

	public EventListAdapter getEventListAdapter()
    {
    	return eventListAdapter;
    }
    
    public void requestNewDataForList(String dataContent, String headerText, boolean resetList)
    {
    	Log.d(tag, "requestNewDataForList");
    	
    	currentEventListParams.headerText = headerText;
    	currentEventListParams.dataContent = dataContent;
    	
    	mEventListFragment.setEventListParams(currentEventListParams);
    	
        EventServiceBuffer.setEventDetailListener(eventListener);
        
		if (currentEventListParams.dataContent.equals(EventServiceBuffer.NO_EVENT_FILTER))
		{
			updateEventAdapter(new ArrayList<EventDetail>(dbWrapper.getAllEvents()), resetList);
		}
		else if (currentEventListParams.dataContent.equals(EventServiceBuffer.MY_EVENTS))
		{				
			updateEventAdapter(dbWrapper.getMyEvents(), resetList);
		}
        
        if (!refreshingData)
        {
        	refreshingData = true;
        	EventServiceBuffer.getEventsFromService(dataContent);
        }
    }
    
    public UpdatedEventDetailListener initialEventListener = new UpdatedEventDetailListener()
    {

		public void myEventOccurred(UpdatedEventDetailEvent evt) {
			
			
			
			Log.d(tag, "initialEventListener took " + sw.getElapsedTime() + " ms");
			
			EventServiceBuffer.removeEventDetailListener(initialEventListener);
			
			updateEventAdapter(new ArrayList<EventDetail>(dbWrapper.getAllEvents()), false);
			
			//mEventListFragment.setDoneLoading();
			
			Log.d(tag, "ready to go " + sw.getElapsedTime() + " ms");
			
		}

		public void updatedEventOccurred(Integer eventId) {
			// TODO Auto-generated method stub
			
		}
    	
    };
    
    public UpdatedEventDetailListener eventListener = new UpdatedEventDetailListener(){
    	
		public void myEventOccurred(UpdatedEventDetailEvent evt) {
			
			Log.d(tag, "eventListener");
			
			EventServiceBuffer.removeEventDetailListener(eventListener);
			
			if (currentEventListParams.dataContent.equals(EventServiceBuffer.NO_EVENT_FILTER))
			{
				updateEventAdapter(new ArrayList<EventDetail>(dbWrapper.getAllEvents()), false);
			}
			else if (currentEventListParams.dataContent.equals(EventServiceBuffer.MY_EVENTS))
			{				
				updateEventAdapter(dbWrapper.getMyEvents(), false);
			}
			
			/*if (progressDialog != null && progressDialog.isShowing())
			{
				mEventListFragment.getPullToRefreshListView().setSelection(1);
				mEventListFragment.getPullToRefreshListView().onRefreshComplete();
			}*/
		}

		public void updatedEventOccurred(Integer eventId) {
			// TODO Auto-generated method stub
			
		}
    };
    
    public void seeMoreDetail(View view)
    {
    	ArrayList<Integer> upcomingEvents = (ArrayList<Integer>) view.getTag();
    	
    	if (upcomingEvents.size() > 0)
    	{
	    	Set<Integer> events = new HashSet<Integer>(upcomingEvents);
	    	
	        FragmentManager     fm = getSupportFragmentManager();
	        FragmentTransaction ft = fm.beginTransaction();
	        
	        EventListFragment upcomingFragment = new EventListFragment();
	        
	        ArrayList<EventDetail> eventDetails = new ArrayList<EventDetail>(dbWrapper.getEvents(events));
	        
	        for (EventDetail eDetail : eventDetails)
	        {
				eDetail.setPhotos(dbWrapper.getPhotos(eDetail.getEventID()));
				eDetail.setOwnerInfo(dbWrapper.getUser(eDetail.getOwnerID()));
				
				if (eDetail.getLocationID() != null)
				{
					eDetail.setLocationInfo(dbWrapper.getLocation(eDetail.getLocationID()));
				}
	        }
	        
	        EventListAdapter upcomingListAdapter = new EventListAdapter(this, R.layout.event_list_item, eventDetails);
	        
	        EventListParams params = new EventListParams("Upcoming Events", EventServiceBuffer.MY_EVENTS);
	    	upcomingFragment.setHeaderView(findViewById(R.id.header));
	    	upcomingFragment.setEventListParams(params);
	    	upcomingFragment.setListAdapter(upcomingListAdapter);
	    	upcomingFragment.updateListAdapter(upcomingListAdapter);
	    	upcomingFragment.showBackButton();
	    	upcomingFragment.hideProgressBar();
	    	
	    	ft.add(R.id.fragment_content, upcomingFragment, "Upcoming");
	    	ft.hide(mEventListFragment);
	    	ft.commit();
    	}
    	else
    	{
    		AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
    				this);
    		
    		alertDialogBuilder
    		.setMessage("No Upcoming Events")
    		.setCancelable(true)
    		.setPositiveButton("Ok",new DialogInterface.OnClickListener() {
    			public void onClick(DialogInterface dialog,int id) {
    				
    				dialog.cancel();
    			}
    		  });
    		
    		// create alert dialog
    		AlertDialog alertDialog = alertDialogBuilder.create();
     
    				// show it
    		alertDialog.show();
    	}
    }
    
    public void takePhoto(View view)
    {
    	Integer eventId = (Integer) view.getTag();
    	
    	MenuFunctions.takePictureOnPhone(eventId, this);
    }
    
    private ArrayList<EventDetail> eventsToDisplay;
    private ArrayList<EventDetail> upcomingEvents;
    private ArrayList<Integer> upcomingIntegers;
    
    private boolean updatingEventAdapter = false;
    
	public void updateEventAdapter(final ArrayList<EventDetail> eventsToShow, final boolean resetList) {
		
		Log.d(tag, "updateEventAdapter");
				
		if (!updatingEventAdapter)
		{
			updatingEventAdapter = true;
			
			Thread thread = new Thread(new Runnable(){
	
				public void run() {
					
					eventsToDisplay = new ArrayList<EventDetail>();
					
					upcomingEvents = new ArrayList<EventDetail>();
					
					for (EventDetail eDetail : eventsToShow)
					{
						UserInfo owner = dbWrapper.getUser(eDetail.getOwnerID());
						if (owner != null)
						{
							
							/*
							 * Initializes some event variables to improve scrolling
							 * Takes away db calls from EventListAdapter
							 */
							
							eDetail.setPhotos(dbWrapper.getPhotos(eDetail.getEventID()));
							eDetail.setOwnerInfo(dbWrapper.getUser(eDetail.getOwnerID()));
							eDetail.setAttendeeCount(eDetail.getAttendeeCount() + TempAttendee.getTempAttendees(eDetail.getEventID()).size());
							
							if (eDetail.getLocationID() != null)
							{
								eDetail.setLocationInfo(dbWrapper.getLocation(eDetail.getLocationID()));
							}
		
							if (eDetail.getStartTime().compareTo(new Date()) < 0)
							{
								eventsToDisplay.add(eDetail);
							}
							else
							{
								upcomingEvents.add(eDetail);
							}
						}
						else
						{
							dbWrapper.deleteEvent(eDetail);
						}
					}
					
					Collections.sort(eventsToDisplay);
					Collections.sort(upcomingEvents);
					
					upcomingIntegers = new ArrayList<Integer>();
					
					for (EventDetail eDetail : upcomingEvents)
					{
						upcomingIntegers.add(eDetail.getEventID());
					}
					
					/*
					 * Bring back on UI thread
					 */
					
					handler.post(new Runnable(){
	
						public void run() {
							
							/*
							 * Used in onResume methoid to prevent us from
							 */
							
							if (isFirstTime)
							{
								isFirstTime = false;
							}
							
							if (eventListAdapter == null)
							{
								eventListAdapter = new EventListAdapter(EventListActivity.this, R.layout.event_list_item, eventsToDisplay);
								mEventListFragment.addEventListAdapter(eventListAdapter);
								
						        mEventListFragment.setHeaderView(findViewById(R.id.header));
						        
						        if (eventsToDisplay.size() > 0)
						        {
						        	mEventListFragment.hideProgressBar();
						        	mEventListFragment.hideNoEventHeader();
						        }
						        
						        showMenuButtons(BaseMotleeActivity.CREATE_EVENT);
						        
						        setActionForRightMenu(plusMenuClick);
						        
						        Intent intent = getIntent();
						        
						        Object listType = null;
						        if (intent.getExtras() != null)
						        {
						        	listType = intent.getExtras().get("ListType");
						        }
						        
						        if (listType != null)
						        {
						        	currentEventListParams.headerText = listType.toString();
						        }
						        else
						        {
						        	currentEventListParams.headerText = BaseMotleeFragment.ALL_EVENTS;
						        	currentEventListParams.dataContent = EventServiceBuffer.NO_EVENT_FILTER;
						        }
						        
						        mEventListFragment.setEventListParams(currentEventListParams);
						        
						        isReadyToCommitFragment = true;
						        
						        //requestNewDataForList(eventListParams.dataContent, eventListParams.headerText);
						        
						        if (fragmentHasAttached)
						        {
							        FragmentManager fm = getSupportFragmentManager();
							        FragmentTransaction ft = fm.beginTransaction();
							        
							        if (fm.findFragmentById(R.id.fragment_content) == null)
							        {
								        ft.add(R.id.fragment_content, mEventListFragment)
								        .commit();
							        }
						        }
							}
							else
							{
								if (resetList)
								{
									eventListAdapter = new EventListAdapter(EventListActivity.this, R.layout.event_list_item, eventsToDisplay);
									mEventListFragment.updateListAdapter(eventListAdapter);
								}
								else
								{
									eventListAdapter.clear();
									eventListAdapter.addAll(eventsToDisplay);
									
									Log.d("EventListActivity", "About to notifyDataSetChanged");
									eventListAdapter.notifyDataSetChanged();
								}
								
								if (currentEventListParams.dataContent.equals(EventServiceBuffer.MY_EVENTS))
								{
									mEventListFragment.showUpcomingHeader(upcomingIntegers);
								}
								else
								{
									mEventListFragment.hideUpcomingHeader();
								}
								
								mEventListFragment.setDoneLoading();
								
						        if (progressDialog != null && progressDialog.isShowing())
						        {
						        	progressDialog.dismiss();
									mEventListFragment.getPullToRefreshListView().setSelection(1);
									mEventListFragment.getPullToRefreshListView().onRefreshComplete();
						        }
							}
							
					        refreshingData = false;
					        updatingEventAdapter = false;
					        
					        Log.d("EventListActivity", "Done notifying data set change");
						}
						
					});					
				}
			
			});
			
			thread.start();
		
		}
	}
    
    public void onClickGetEventDetail(View view)
    {
    	Integer eventID = Integer.parseInt(view.getContentDescription().toString());
    	
    	Intent eventDetail = new Intent(EventListActivity.this, EventDetailActivity.class);
    	
    	eventDetail.putExtra("EventID", eventID);
    	
    	Log.d("Transition", "Started transition to EventDetail");
    	
    	startActivity(eventDetail);
    	
    	overridePendingTransition(R.anim.push_left_in, R.anim.push_left_out);
    }
    
    @Override
    public void onPause()
    {
    	super.onPause();
    	
    	fragmentHasAttached = false;
    	isReadyToCommitFragment = false;
    }
    
    @Override
    public void backButtonPressed()
    {
    	FragmentManager fm = getSupportFragmentManager();
    	FragmentTransaction ft = fm.beginTransaction();
    	if (fm.findFragmentByTag("Upcoming") != null)
    	{
    		Fragment fragment = fm.findFragmentByTag("Upcoming");
    		ft.remove(fragment);
    		ft.show(mEventListFragment);
    		mEventListFragment.hideBackButton();
    		TextView text = (TextView) findViewById(R.id.header_textView);
    		text.setText(BaseMotleeFragment.MY_EVENTS);
    		ft.commit();
    	}
    	else
    	{
    		super.backButtonPressed();
    	}
    }
	
	public void joinOrAddContent(View view)
	{
		MenuFunctions.takePictureOnPhone(view, this);
	}
	
	protected void getFriendsFromFacebook() {
		
		Thread friendThread = new Thread(new Runnable(){

			public void run() 
			{
				Session facebookSession = Session.getActiveSession();
				
				if (facebookSession != null && facebookSession.isOpened())
				{			
					String query = "select name, uid, pic_square from user where uid in (select uid2 from friend where uid1=me()) order by name";
					Bundle bundleParams = new Bundle();
					bundleParams.putString("q", query);
					
					final Request request = new Request(facebookSession, "/fql", bundleParams, HttpMethod.GET);   
					
					Response response = request.executeAndWait();
					
					try
					{
						JSONArray users = (JSONArray) response.getGraphObject().getProperty("data");
						
						ArrayList<Long> uids = new ArrayList<Long>();
						
						for (int i = 0; i < users.length(); i++)
						{
							JSONObject user = users.getJSONObject(i);
							uids.add(Long.valueOf(user.getLong("uid")));
						}
						
						dbWrapper.updateFriendsList(uids);
					}
					catch (JSONException e)
					{
						Log.e(this.toString(), "Failed to get friends");
					}
					catch (Exception e)
					{
						Log.e(this.toString(), "Failed to get friends");
					}
				}
			}
		});
		
		friendThread.start();
	}

	public void OnFragmentAttached() {

		this.fragmentHasAttached = true;
		
		if (this.isReadyToCommitFragment)
		{
			FragmentManager fm = getSupportFragmentManager();
			if (fm.findFragmentById(R.id.fragment_content) == null)
			{
				FragmentTransaction ft = fm.beginTransaction();
				
				ft.add(R.id.fragment_content, mEventListFragment);
				
				ft.commit();
			}
		}
		
	}
}

