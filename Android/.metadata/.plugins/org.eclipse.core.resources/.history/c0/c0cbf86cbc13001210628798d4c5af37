package com.motlee.android.layouts;

import android.R;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.view.Display;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.LinearLayout;

/* 

	This class overrides the LinearLayout allowing us to scale a 
	background drawable before it is set as a background for a 
	LinearLayout. This will allow us to use background images of 
	a "source" size and let the program scale it to our needs.

*/

public class RatioBackgroundLinearLayout extends LinearLayout {

	private final Context context;
	
	public RatioBackgroundLinearLayout(Context context, AttributeSet attrs) {
		super(context, attrs);
		
		this.context = context;
	}

	public RatioBackgroundLinearLayout(Context context) {
		super(context);
		
		this.context = context;
	}
	
	/*@Override
	public void onFinishInflate()
	{
        int index = getChildCount();
        // Collect children declared in XML.
        View[] children = new View[index];
        while(--index >= 0) {
            children[index] = getChildAt(index);
        }
        // Pressumably, wipe out existing content (still holding reference to it).
        this.detachAllViewsFromParent();
        // Inflate new "template".
        final View template = LayoutInflater.from(getContext())
            .inflate(R.layout.labeled_layout, this, true);
        // Obtain reference to a new container within "template".
        final ViewGroup vg = (ViewGroup)template.findViewById(R.id.layout);
        index = children.length;
        // Push declared children into new container.
        while(--index >= 0) {
            vg.addView(children[index]);
        }

        // They suggest to call it no matter what.
        super.onFinishInflate();
	}*/
	
	@Override
	public void setBackgroundDrawable(Drawable drawable)
	{		
		super.setBackgroundDrawable(scaleBackgroundImage(drawable));
	}
	
	@Override

	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec){

	     //At this time we need to call setMeasuredDimensions(). Lets just
	     //call the parent View's method
	     //(see https://github.com/android/platform_frameworks_base/blob/master/core/java/android/view/View.java)
	     //that does:
	     //setMeasuredDimension(getDefaultSize(
	     //                       getSuggestedMinimumWidth(), widthMeasureSpec),
	     //                    getDefaultSize(
	     //                       getSuggestedMinimumHeight(), heightMeasureSpec));
	     //		

	      super.onMeasure(widthMeasureSpec, heightMeasureSpec);
	      int wspec = MeasureSpec.makeMeasureSpec(
	                  getMeasuredWidth()/getChildCount(), MeasureSpec.EXACTLY);
	      int hspec = MeasureSpec.makeMeasureSpec(
	                  getMeasuredHeight(), MeasureSpec.EXACTLY);
	      for(int i=0; i<getChildCount(); i++){
	         View v = getChildAt(i);
	         v.measure(wspec, hspec);
	      }
	}
	
	// Scale image preserving Aspect Ratio to the screen's width
	
	private Drawable scaleBackgroundImage(Drawable drawable)
	{
		Bitmap bitmap = ((BitmapDrawable) drawable).getBitmap();
		
		Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay(); 
		int width = display.getWidth(); 
		
		float scaleFactor = ((float) width) / bitmap.getWidth();

		Matrix scale = new Matrix();
		scale.postScale(scaleFactor, scaleFactor);
		
		Drawable d = new BitmapDrawable(getResources(), Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), scale, false));
		
		return d;
	}
}
