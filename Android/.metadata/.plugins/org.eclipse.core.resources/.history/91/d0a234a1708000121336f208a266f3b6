package com.motlee.android.fragment;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Point;
import android.graphics.drawable.Drawable;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationManager;
import android.net.http.AndroidHttpClient;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMapOptions;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.UiSettings;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.maps.GeoPoint;
import com.google.android.maps.MapController;
import com.google.android.maps.MapView;
import com.google.android.maps.Overlay;
import com.motlee.android.R;
import com.motlee.android.database.DatabaseWrapper;
import com.motlee.android.object.DrawableCache;
import com.motlee.android.object.EventDetail;
import com.motlee.android.object.GlobalVariables;
import com.motlee.android.object.LocationInfo;
import com.motlee.android.object.NonClickableItemizedOverlay;
import com.motlee.android.object.OverlayItemWithEventID;
import com.motlee.android.object.PhotoItem;

public class PhotoMapFragment extends SupportMapFragment {

	private DatabaseWrapper dbWrapper;
	
	private EventDetail mEventDetail;
	
	private PhotoDistance photoDistance;
	
	private LatLngBounds latLngBounds;
	
	@Override
	public void onResume()
	{
		super.onResume();
		
		//setMapOverlays();
	}
	
	public PhotoMapFragment()
	{
		super();
	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
	{
		final View view = super.onCreateView(inflater, container, savedInstanceState);
		
		dbWrapper = new DatabaseWrapper(getActivity().getApplicationContext());
		
		photoDistance = new PhotoDistance(); 
		
	    if (view.getViewTreeObserver().isAlive()) {
	    	view.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
	            @SuppressLint("NewApi") // We check which build version we are using.
	            
	            public void onGlobalLayout() {
	                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
	                  view.getViewTreeObserver().removeGlobalOnLayoutListener(this);
	                } else {
	                  view.getViewTreeObserver().removeOnGlobalLayoutListener(this);
	                }
	                if (photoDistance.calculateDistance() > 5)
	                {
	                	getMap().moveCamera(CameraUpdateFactory.newLatLngBounds(photoDistance.getLatLngBounds(), 150));
	                }
	            }
	        });
	    }
		
		initMap();
		
		return view;
	}
	
	private class PhotoDistance
	{
		private PhotoItem photo1;
		private PhotoItem photo2;
		private double distance = 0;
		
		private double maxLat = -200;
		private double maxLon = -200;
		private double minLat = -200;
		private double minLon = -200;
		
		private LatLngBounds.Builder latLngBounds = new LatLngBounds.Builder();
		
		private static final double R = 6371;
		
		/*public double getDistance()
		{
			return distance;
		}*/
		
		public LatLng getMidPoint()
		{
			double dLon = Math.toRadians(maxLon-minLon);
	        double Bx = Math.cos(minLat) * Math.cos(dLon);
	        double By = Math.cos(minLat) * Math.sin(dLon);
	        double lat3 = Math.atan2(Math.sin(maxLat)+Math.sin(minLat),Math.sqrt( (Math.cos(maxLat)+Bx)*(Math.cos(maxLat)+Bx) + By*By) );
	        double lon3 = minLon + Math.atan2(By, Math.cos(maxLat) + Bx);
	        
	        return new LatLng(Math.toDegrees(lat3), Math.toDegrees(lon3));
		}
		
		public void calculateDistance(PhotoItem photo)
		{
			calculateBounds(photo);
			
			/*if (photo1 == null)
			{
				photo1 = photo;
				return;
			}
			else if (photo2 == null)
			{
				photo2 = photo;
				distance = calculateDistance(photo1, photo2);
				return;
			}
			
			double distancePhoto1 = calculateDistance(photo1, photo);
			double distancePhoto2 = calculateDistance(photo2, photo);
			
			if (distancePhoto1 < distancePhoto2)
			{
				if (distance < distancePhoto2)
				{
					photo1 = photo;
					distance = distancePhoto2;
				}
			}
			else
			{
				if (distance < distancePhoto1)
				{
					photo2 = photo;
					distance = distancePhoto1;
				}
			}*/
		}
		
		private void calculateBounds(PhotoItem photo)
		{
			latLngBounds.include(new LatLng(photo.lat, photo.lon));
			
			//Initialize
			if (maxLat == -200 && maxLon == -200 && minLat == -200 && minLon == -200)
			{
				maxLat = photo.lat;
				maxLon = photo.lon;
				minLat = photo.lat;
				minLon = photo.lon;
			}
			else
			{
				if (photo.lat > maxLat)
				{
					maxLat = photo.lat;
				}
				if (photo.lon > maxLon)
				{
					maxLon = photo.lon;
				}
				if (photo.lat < minLat)
				{
					minLat = photo.lat;
				}
				if (photo.lon < minLon)
				{
					minLon = photo.lon;
				}
			}
		}
		
		public LatLngBounds getLatLngBounds()
		{
			return latLngBounds.build();
		}
		
		public double calculateDistance()
		{
			double dLat = deg2rad(maxLat - minLat);
			double dLon = deg2rad(minLon - maxLon);
			
			double a = 
					Math.sin(dLat / 2) * Math.sin(dLat / 2) + 
					Math.cos(deg2rad(maxLat)) * Math.cos(deg2rad(minLat)) *
					Math.sin(dLon / 2) * Math.sin(dLon / 2);
			
			double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
			double d = R * c;
			return d;
		}
		
		private double deg2rad(double deg)
		{
			return deg * (Math.PI / 180);
		}
		
		private double rad2deg(double rad)
		{
			return rad * (180 / Math.PI);
		}
	}
	
	private void initMap() {
		
		Collection<PhotoItem> photos = dbWrapper.getPhotos(mEventDetail.getEventID());
		
    	LocationInfo myLocation = GlobalVariables.getInstance().getLocationInfo();
    	
    	LatLng position = new LatLng(myLocation.lat, myLocation.lon);

    	UiSettings uiSettings = getMap().getUiSettings();
    	
    	uiSettings.setCompassEnabled(false);
    	uiSettings.setRotateGesturesEnabled(false);
    	uiSettings.setTiltGesturesEnabled(false);
    	uiSettings.setZoomControlsEnabled(false);
		
		if (photos.size() > 0)
		{
			//ArrayList<PhotoItem> photoWithLocation = new ArrayList<PhotoItem>();
			
			int count = 0;
			
			for (PhotoItem photo : photos)
			{
				if ((photo.lat != 0 && photo.lon != 0) || (photo.lat != -1 && photo.lon != -1))
				{
					count++;
					photoDistance.calculateDistance(photo);
					BitmapDownloaderTask task = new BitmapDownloaderTask(photo);
					task.execute(GlobalVariables.getInstance().getAWSUrlThumbnail(photo));
				}
				
				Log.d("PhotoMap", "count: " + count);
				
				if (count > 0)
				{
					getMap().moveCamera(CameraUpdateFactory.newLatLngZoom(photoDistance.getMidPoint(), 14));
				}
				else
				{
					getMap().moveCamera(CameraUpdateFactory.newLatLngZoom(position, 14));
				}
			}
		}
		else
		{
			getMap().moveCamera(CameraUpdateFactory.newLatLngZoom(position, 14));
		}
		
	}
	
    Bitmap downloadBitmap(String url) {
        final int IO_BUFFER_SIZE = 4 * 1024;

        // AndroidHttpClient is not allowed to be used from the main thread
        final HttpClient client = AndroidHttpClient.newInstance("Android");
        final HttpGet getRequest = new HttpGet(url);

        try {
            HttpResponse response = client.execute(getRequest);
            final int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                Log.w("ImageDownloader", "Error " + statusCode +
                        " while retrieving bitmap from " + url);
                return null;
            }

            final HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream inputStream = null;
                try {
                    inputStream = entity.getContent();
                    // return BitmapFactory.decodeStream(inputStream);
                    // Bug on slow connections, fixed in future release.
                    Bitmap bitmap = BitmapFactory.decodeStream(inputStream);
                    return Bitmap.createScaledBitmap(bitmap, DrawableCache.convertDpToPixel(50), DrawableCache.convertDpToPixel(50), false);
                } finally {
                    if (inputStream != null) {
                        inputStream.close();
                    }
                    entity.consumeContent();
                }
            }
        } catch (IOException e) {
            getRequest.abort();
            Log.w("ImageDownloader", "I/O error while retrieving bitmap from " + url, e);
        } catch (IllegalStateException e) {
            getRequest.abort();
            Log.w("ImageDownloader", "Incorrect URL: " + url);
        } catch (Exception e) {
            getRequest.abort();
            Log.w("ImageDownloader", "Error while retrieving bitmap from " + url, e);
        } finally {
            if ((client instanceof AndroidHttpClient)) {
                ((AndroidHttpClient) client).close();
            }
        }
        return null;
    }
	
    /**
     * The actual AsyncTask that will asynchronously download the image.
     */
    class BitmapDownloaderTask extends AsyncTask<String, Void, Bitmap> {
        private String url;
        private PhotoItem photo;

        public BitmapDownloaderTask(PhotoItem photo) {
        	this.photo = photo;
        }

        /**
         * Actual download method.
         */
        @Override
        protected Bitmap doInBackground(String... params) {
            url = params[0];
            return downloadBitmap(url);
        }

        /**
         * Once the image is downloaded, associates it to the imageView
         */
        @Override
        protected void onPostExecute(Bitmap bitmap) {
            if (isCancelled()) {
                bitmap = null;
            }

            //addBitmapToCache(url, bitmap);
            
            if (bitmap != null)
            {
            	getMap().addMarker(new MarkerOptions()
            	.position(new LatLng(photo.lat, photo.lon))
            	.draggable(false)
            	.icon(BitmapDescriptorFactory.fromBitmap(bitmap)));
            }
        }
    }

	public void addEventDetail(EventDetail eDetail) {
		
		mEventDetail = eDetail;
	}
}
