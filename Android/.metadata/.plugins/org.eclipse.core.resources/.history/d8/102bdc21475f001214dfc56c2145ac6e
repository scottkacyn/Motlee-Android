package com.motlee.android.adapter;

import java.sql.SQLException;
import java.util.ArrayList;

import com.emilsjolander.components.StickyListHeaders.StickyListHeadersBaseAdapter;
import com.motlee.android.R;
import com.motlee.android.database.DatabaseHelper;
import com.motlee.android.layouts.HorizontalRatioLinearLayout;
import com.motlee.android.object.DateStringFormatter;
import com.motlee.android.object.DrawableCache;
import com.motlee.android.object.DrawableWithHeight;
import com.motlee.android.object.GlobalVariables;
import com.motlee.android.object.Notification;
import com.motlee.android.object.SharePref;
import com.motlee.android.object.UserInfo;

import android.content.Context;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;

public class NotificationAdapter extends StickyListHeadersBaseAdapter {

	private String tag = "NotificationAdapter";
	
	private LayoutInflater inflater;
	private int resource;
	private ArrayList<Notification> mData;
	private Integer mSplitSection;
	
	private DatabaseHelper helper;
	
    public NotificationAdapter(Context context, int resource, ArrayList<Notification> data, int splitIndex) {
    	super(context);
        	Log.w(tag, "constructor");
            this.inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            this.resource = resource;
            this.mData = new ArrayList<Notification>(data);
            this.mSplitSection = splitIndex;
            
            
            helper = DatabaseHelper.getInstance(context.getApplicationContext());
    }
	
    /**
     * Return the size of the data set.
     */
    public int getCount() {
            return this.mData.size();
    }
    
    /**
     * Return an object in the data set.
     */
    public Notification getItem(int position) {
		return this.mData.get(position);
    }
    
    /**
     * Return the position provided.
     */
    public long getItemId(int position) {
            return position;
    }

    public void add(Notification notification)
    {
    	Log.w(tag, "add");
    	this.mData.add(notification);
    	this.notifyDataSetChanged();
    }
    
    public void clear()
    {
    	Log.w(tag, "clear");
    	this.notifyDataSetChanged();
    }
    
    /**
     * Return a generated view for a position.
     */
    @Override
    public View getView(int position, View convertView) {
    	Log.w(tag, "getView: position, " + position + ", convertView, " + convertView);
            // reuse a given view, or inflate a new one from the xml
             
        ViewHolder holder = new ViewHolder();
        
        if (convertView == null) {
        	Log.w(tag, "inflating resource: " + resource);
                convertView = this.inflater.inflate(resource, null);
                
                holder.notification_profile = (ImageView) convertView.findViewById(R.id.notification_profile_pic);
                holder.notification_message = (TextView) convertView.findViewById(R.id.notification_message);
                holder.notification_button = (ImageButton) convertView.findViewById(R.id.notification_button);
                holder.notification_time = (TextView) convertView.findViewById(R.id.notification_time);
                
                convertView.setTag(holder);
        } else {
                holder = (ViewHolder) convertView.getTag();
        }

        Notification notification = this.mData.get(position);
        
        UserInfo notificationOwner = null;
		try {
			notificationOwner = helper.getUserDao().queryForId(notification.userId);
		} catch (SQLException e) {
			Log.e("DatabaseHelper", "Failed to queryForId for user", e);
		}
        		
        holder.notification_message.setText(notification.message);
        holder.notification_message.setTypeface(GlobalVariables.getInstance().getGothamLightFont());
        holder.notification_time.setText(DateStringFormatter.getDescriptivePastDateString(notification.timeCreated));
        holder.notification_time.setTypeface(GlobalVariables.getInstance().getGothamLightFont());
        holder.notification_button.setTag(notification);
        
        if (getHeaderId(position) == 0)
        {
        	DrawableWithHeight drawable = DrawableCache.getDrawable(R.drawable.label_button_pressed, SharePref.getIntPref(getContext().getApplicationContext(), SharePref.DISPLAY_WIDTH));
        	
        	holder.notification_button.set
        }
        
        DrawableWithHeight drawable = DrawableCache.getDrawable(R.drawable.label_button_normal, GlobalVariables.DISPLAY_WIDTH);
        
        holder.notification_profile.setMaxHeight(drawable.getHeight() - DrawableCache.convertDpToPixel(5));
        holder.notification_profile.setMaxWidth(drawable.getHeight() - DrawableCache.convertDpToPixel(5));
        
        GlobalVariables.getInstance().downloadImage(holder.notification_profile, 
        		GlobalVariables.getInstance().getFacebookPictureUrlLarge(notificationOwner.uid), 
        		drawable.getHeight() - DrawableCache.convertDpToPixel(5));
        // bind the data to the view object
        return convertView;
    }
    
    private static class ViewHolder {
        public ImageView notification_profile;
        public TextView notification_message;
        public ImageButton notification_button;
        public TextView notification_time;
    }


	private class HeaderViewHolder
	{
		TextView category_title;
	}
    
	@Override
	public View getHeaderView(int position, View convertView) {
		HeaderViewHolder holder = new HeaderViewHolder();
    	
    	if (convertView == null) {
    		convertView = (View) this.inflater.inflate(R.layout.search_category_bar, null);
            holder.category_title = (TextView) convertView.findViewById(R.id.category_text);
            convertView.setTag(holder);
        }
    	else
    	{
    		holder = (HeaderViewHolder) convertView.getTag();
    	}
    	
    	holder.category_title.setTypeface(GlobalVariables.getInstance().getHelveticaNeueBoldFont());
    	if (position < mSplitSection)
    	{
    		holder.category_title.setText("New Notifications");
    	}
    	else
    	{
    		holder.category_title.setText("Old Notifications");
    	}
    	
    	return convertView;
	}

	@Override
	public long getHeaderId(int position) {
		if (position < mSplitSection)
		{
			return 0;
		}
		else
		{
			return 1;
		}
	}
}
