package com.motlee.android;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.json.JSONException;
import org.json.JSONObject;

import com.facebook.FacebookRequestError;
import com.facebook.HttpMethod;
import com.facebook.Request;
import com.facebook.RequestAsyncTask;
import com.facebook.Response;
import com.facebook.Session;
import com.google.android.maps.MapView;
import com.motlee.android.database.DatabaseHelper;
import com.motlee.android.database.DatabaseWrapper;
import com.motlee.android.enums.EventItemType;
import com.motlee.android.fragment.DateDetailFragment;
import com.motlee.android.fragment.EmptyFragmentWithCallbackOnResume;
import com.motlee.android.fragment.EmptyFragmentWithCallbackOnResume.OnFragmentAttachedListener;
import com.motlee.android.fragment.EventDetailFragment;
import com.motlee.android.fragment.LocationFragment;
import com.motlee.android.fragment.MessageDetailFragment;
import com.motlee.android.fragment.PeopleListFragment;
import com.motlee.android.object.Attendee;
import com.motlee.android.object.DrawableCache;
import com.motlee.android.object.EventDetail;
import com.motlee.android.object.EventItem;
import com.motlee.android.object.EventServiceBuffer;
import com.motlee.android.object.GlobalActivityFunctions;
import com.motlee.android.object.GlobalVariables;
import com.motlee.android.object.Like;
import com.motlee.android.object.MenuFunctions;
import com.motlee.android.object.PhotoItem;
import com.motlee.android.object.SharedPreferencesWrapper;
import com.motlee.android.object.StoryItem;
import com.motlee.android.object.UserInfo;
import com.motlee.android.object.event.UpdatedAttendeeEvent;
import com.motlee.android.object.event.UpdatedAttendeeListener;
import com.motlee.android.object.event.UpdatedEventDetailEvent;
import com.motlee.android.object.event.UpdatedEventDetailListener;
import com.motlee.android.object.event.UpdatedLikeEvent;
import com.motlee.android.object.event.UpdatedLikeListener;
import com.motlee.android.object.event.UpdatedPhotoEvent;
import com.motlee.android.object.event.UpdatedPhotoListener;
import com.motlee.android.view.ProgressDialogWithTimeout;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.Toast;

public class EventDetailActivity extends BaseDetailActivity implements OnFragmentAttachedListener, UpdatedEventDetailListener, UpdatedPhotoListener {

	private FragmentTransaction ft;
	private int mEventID;
	
	public static final String PHOTOS = "photos";
	public static final String MESSAGES = "messages";
	
	private static final List<String> PERMISSIONS = Arrays.asList("publish_actions");
	
	private EventDetailFragment photosFragment;
	private PeopleListFragment peopleListFragment;
	private LocationFragment locationFragment;
	private DateDetailFragment dateFragment;
	private MessageDetailFragment messageFragment;
	
	private boolean hasShownLocation = false;
	
	private MapView mapView;
	
	private View header;
	
	private Handler handler = new Handler();
	
	private HashMap<Integer, ImageButton> likeButtons = new HashMap<Integer, ImageButton>();
	
	private PhotoItem mNewPhoto;
	
	private AlertDialog alertDialog;
	
	private DatabaseWrapper dbWrapper;
	
	private String firstScreen;
	
	/*
	 * (non-Javadoc)
	 * @see com.google.android.maps.MapActivity#onNewIntent(android.content.Intent)
	 * We override onNewIntent. This is a singleTask Activity so we need to load the 
	 * new event data into the existing fragment
	 */
	@Override
	public void onNewIntent(Intent intent)
	{
		
		mEventID = intent.getExtras().getInt("EventID");
		mNewPhoto = intent.getParcelableExtra("NewPhoto");
		firstScreen = getIntent().getExtras().getString("Page");
		
		eDetail = dbWrapper.getEvent(mEventID);
		
		setUpFragments();
	}

	@Override
	public void onResume()
	{
		super.onResume();
		
		eDetail = dbWrapper.getEvent(mEventID);
		
		if (progressDialog == null || !progressDialog.isShowing())
		{
			if (eDetail != null)
			{
				progressDialog = ProgressDialog.show(EventDetailActivity.this, "", "Loading " + eDetail.getEventName());
			}
			else
			{
				progressDialog = ProgressDialog.show(EventDetailActivity.this, "", "Loading...");
			}
		}//setUpFragments();
		
		if (findViewById(R.id.header) == null)
		{
			setContentView(R.layout.main);
		}
	}
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        Log.d(this.toString(), "onCreate");
        
        setContentView(R.layout.main);
        
        menu = GlobalActivityFunctions.setUpSlidingMenu(this);
        
        dbWrapper = new DatabaseWrapper(this.getApplicationContext());
        
        View mainLayout = findViewById(R.id.main_frame_layout);
        mainLayout.setClickable(true);
        //mainLayout.setOnClickListener(onClick);
        
        firstScreen = getIntent().getExtras().getString("Page");
        
        mEventID = getIntent().getExtras().getInt("EventID");
        
        eDetail = dbWrapper.getEvent(mEventID);
        
        header = findViewById(R.id.header);
        mNewPhoto = getIntent().getParcelableExtra("NewPhoto");
        
        //progressDialog = ProgressDialog.show(EventDetailActivity.this, "", "Loading " + eDetail.getEventName());
        
        //showMenuButtons();
        
        EventServiceBuffer.setPhotoListener(this);
        
        FragmentManager fm = getSupportFragmentManager();
        ft = fm.beginTransaction();
        
        ft.add(new EmptyFragmentWithCallbackOnResume(), "EmptyFragment")
        .commit();
        
    }

	private void setUpFragments() {
		
    	photosFragment = setUpPhotosFragment();
		
    	peopleListFragment = setUpFriendsFragment();
    	
    	if (locationFragment == null)
    	{
    		locationFragment = setUpLocationFragment();
    	}
    	
    	dateFragment = setUpDateFragment();
    	
    	messageFragment = setUpMessageFragment();
	}

	private OnClickListener takePhotoListener = new OnClickListener(){

		public void onClick(View v) {
			
			MenuFunctions.takePictureOnPhone(mEventID, EventDetailActivity.this);
			
		}
		
	};
	
	private OnClickListener joinMenuListener = new OnClickListener(){

		public void onClick(View v) {
			
			AlertDialog.Builder builder = new AlertDialog.Builder(EventDetailActivity.this);
			builder.setMessage("Join This Event?")
			.setCancelable(true)
			.setPositiveButton("Join!", joinListener)
			.setNegativeButton("Nope", new DialogInterface.OnClickListener() {
				public void onClick(DialogInterface dialog, int id) {
					dialog.cancel();
				}
			});
			
			builder.create().show();
			
		}
		
	};
	
	public DialogInterface.OnClickListener joinListener = new DialogInterface.OnClickListener() {
		public void onClick(DialogInterface dialog, int id) {
			
			publishStoryOnFacebookFeed();
			
			EventServiceBuffer.setAttendeeListener(attendeeListener);

			progressDialog = ProgressDialog.show(EventDetailActivity.this, "", "Joining Event");
			
			ArrayList<Long> attendees = new ArrayList<Long>();
			
			UserInfo user = dbWrapper.getUser(SharedPreferencesWrapper.getIntPref(getApplicationContext(), SharedPreferencesWrapper.USER_ID));
			
			attendees.add(user.uid);
			
			EventServiceBuffer.joinEvent(eDetail.getEventID());
		}
	};
	
	/*private OnClickListener onClick = new OnClickListener(){

		public void onClick(View view) {
			
			InputMethodManager imm = (InputMethodManager) view.getContext()
		            .getSystemService(Context.INPUT_METHOD_SERVICE);
		    imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
		    
		    EventDetailFragment fragment = (EventDetailFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_content);
		    
		    if (fragment != null)
		    {
		    	fragment.clearEditTextFocus();
		    }
		}
    	
    };*/
    
	public void showProfilePage(View view)
	{
		UserInfo user = (UserInfo) view.getTag();
		
		Intent userProfile = new Intent(EventDetailActivity.this, UserProfilePageActivity.class);
		
		userProfile.putExtra("UserID", user.id);
		userProfile.putExtra("UID", user.uid);
		
		startActivity(userProfile);
	}
	
    protected void publishStoryOnFacebookFeed() {
        Session session = Session.getActiveSession();

        if (session != null){

            // Check for publish permissions    
            List<String> permissions = session.getPermissions();
            if (!isSubsetOf(PERMISSIONS, permissions)) {
                Session.NewPermissionsRequest newPermissionsRequest = new Session
                        .NewPermissionsRequest(this, PERMISSIONS);
            session.requestNewPublishPermissions(newPermissionsRequest);
                return;
            }

            Bundle postParams = new Bundle();
            postParams.putString("name", "Facebook SDK for Android");
            postParams.putString("caption", "Build great social apps and get more installs.");
            postParams.putString("description", "The Facebook SDK for Android makes it easier and faster to develop Facebook integrated Android apps.");
            postParams.putString("link", "https://developers.facebook.com/android");
            postParams.putString("picture", "https://raw.github.com/fbsamples/ios-3.x-howtos/master/Images/iossdk_logo.png");

            Request.Callback callback= new Request.Callback() {
                public void onCompleted(Response response) {
                    JSONObject graphResponse = response
                                               .getGraphObject()
                                               .getInnerJSONObject();
                    String postId = null;
                    try {
                        postId = graphResponse.getString("id");
                    } catch (JSONException e) {
                        Log.i("EventDetailActivity",
                            "JSON error "+ e.getMessage());
                    }
                    FacebookRequestError error = response.getError();
                    if (error != null) {
                        Toast.makeText(getApplicationContext(),
                             error.getErrorMessage(),
                             Toast.LENGTH_SHORT).show();
                        } else {
                            Toast.makeText(getApplicationContext(), 
                                 postId,
                                 Toast.LENGTH_LONG).show();
                    }
                }
            };

            Request request = new Request(session, "me/feed", postParams, 
                                  HttpMethod.POST, callback);

            RequestAsyncTask task = new RequestAsyncTask(request);
            task.execute();
        }
		
	}

    private boolean isSubsetOf(Collection<String> subset, Collection<String> superset) {
        for (String string : subset) {
            if (!superset.contains(string)) {
                return false;
            }
        }
        return true;
    }
    
	@Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);

        // Checks whether a hardware keyboard is available
        if (newConfig.hardKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_NO) {
            //Toast.makeText(this, "keyboard visible", Toast.LENGTH_SHORT).show();
        } else if (newConfig.hardKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_YES) {
		    EventDetailFragment fragment = (EventDetailFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_content);
		    
		    if (fragment != null)
		    {
		    	fragment.clearEditTextFocus();
		    }
        }
    }

	private MessageDetailFragment setUpMessageFragment() {

		eDetail = dbWrapper.getEvent(mEventID);
        
        MessageDetailFragment messageFragment = new MessageDetailFragment();
        
        messageFragment.setHeaderView(header);
        
        if (eDetail != null)
        {
        	messageFragment.addEventDetail(eDetail);
        }
        
        messageFragment.setMessageButton(findViewById(R.id.menu_buttons));
        
        return messageFragment;
	}
    
    private DateDetailFragment setUpDateFragment()
    {
    	DateDetailFragment dateDetailFragment = new DateDetailFragment();

        dateDetailFragment.setHeaderView(findViewById(R.id.header));
        
        if (eDetail != null)
        {
        	dateDetailFragment.addEventDetail(eDetail);
        }
        
        return dateDetailFragment;
    }
    
    private LocationFragment setUpLocationFragment()
    {
    	eDetail = dbWrapper.getEvent(mEventID);
    	
        LocationFragment locationFragment = new LocationFragment();
        
        locationFragment.setHeaderView(findViewById(R.id.header));

        if (eDetail != null)
        {
        	locationFragment.addEventDetail(eDetail);
        }
        
        locationFragment.showPageHeader();
        
        //locationFragment.setMapView(mapView);
        
        return locationFragment;
    }
    
	private EventDetailFragment setUpPhotosFragment() {

		eDetail = dbWrapper.getEvent(mEventID);
        
        EventDetailFragment eventDetailFragment = new EventDetailFragment();
        
        eventDetailFragment.setHeaderView(header);
        
        if (eDetail != null)
        {
        	eventDetailFragment.addEventDetail(eDetail);
        }
        
        return eventDetailFragment;
	}
    
	private PeopleListFragment setUpFriendsFragment() {

		eDetail = dbWrapper.getEvent(mEventID);
        
		PeopleListFragment fragment = new PeopleListFragment();
        
    	fragment.setHeaderView(findViewById(R.id.header));
    	
    	if (eDetail != null)
    	{
    		fragment.setEventDetail(eDetail);
    	}
        
        return fragment;
	}
	
	public void onRightHeaderButtonClick(View view)
	{
		String tag = view.getTag().toString();
		
		if (tag.equals(BaseDetailActivity.JOIN))
		{
			
		}
		else if (tag.equals(BaseDetailActivity.EDIT))
		{
			Intent showEdit = new Intent(EventDetailActivity.this, CreateEventActivity.class);
			showEdit.putExtra("EventID", eDetail.getEventID());
			startActivity(showEdit);
		}
	}
	
	private UpdatedAttendeeListener attendeeListener = new UpdatedAttendeeListener(){

		public void raised(UpdatedAttendeeEvent e) {
			
			EventServiceBuffer.setEventDetailListener(EventDetailActivity.this);
			
			EventServiceBuffer.getEventsFromService(eDetail.getEventID());
		}
		
	};
	
    /*public void switchToGridView(View view)
    {
    	EventDetailFragment fragment = (EventDetailFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_content);
    	
    	fragment.addGridToTableLayout();
    }
    
    public void switchToListView(View view)
    {
    	EventDetailFragment fragment = (EventDetailFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_content);
    	
    	//fragment.addListToAdapter();
    }*/
    
    /*public void seeMoreDetail(View view)
    {
    	EventDetailFragment fragment = (EventDetailFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_content);
    	
    	fragment.clearEditTextFocus();
    	
    	String description = view.getContentDescription().toString();
    	
    	Intent eventDetail = new Intent(EventDetailActivity.this, MoreEventDetailActivity.class);
    	
    	eventDetail.putExtra("DetailDescription", description);
    	eventDetail.putExtra("EventID", eDetail.getEventID());
    	
    	startActivity(eventDetail);
    }*/
	
	public void showMap(View view)
	{
		removeMessageText();
		locationFragment.clearEventList();
		locationFragment.addEventDetail(eDetail);
		FragmentManager     fm = getSupportFragmentManager();
        ft = fm.beginTransaction();
        
        if (fm.findFragmentById(R.id.fragment_content) == null)
        {
        	ft.add(R.id.fragment_content, locationFragment, "Location");
        }
        else if (fm.findFragmentByTag("Location") == null)
        {
        	ft.replace(R.id.fragment_content, locationFragment, "Location");
        }
        else
        {
        	if (fm.findFragmentByTag("Location") == locationFragment)
        	{
	        	Fragment fragment = fm.findFragmentById(R.id.fragment_content);
	        	if (fragment != locationFragment)
	        	{
	        		ft.remove(fragment);
	        	}
	        	
	        	ft.show(locationFragment);
        	}
        	else
        	{
        		ft.replace(R.id.fragment_content, locationFragment, "Location");
        	}
        }
        
        hasShownLocation = true;
        
		ft.commit();
	}
	
	public void showPhotos(View view)
	{
		removeMessageText();
		photosFragment.addEventDetail(eDetail);
		showFragment(photosFragment);
	}
	
	public void showFriends(View view)
	{
		removeMessageText();
		peopleListFragment.setEventDetail(eDetail);
        showFragment(peopleListFragment);
	}

	public void showTime(View view)
	{
		removeMessageText();
		dateFragment.addEventDetail(eDetail);
		showFragment(dateFragment);
	}
	
	public void showComments(View view)
	{
		setUpMessageText();
		messageFragment.addEventDetail(eDetail);
		showFragment(messageFragment);
	}

	private void removeMessageText()
	{
		LinearLayout menuButton = ((LinearLayout) findViewById(R.id.menu_buttons));
		
		if (menuButton.getBackground() != null)
		{
			menuButton.setBackgroundDrawable(null);
		}
		
		menuButton.findViewById(R.id.message_post_text).setVisibility(View.GONE);
		
		findViewById(R.id.menu_buttons).setVisibility(View.VISIBLE);
	}
	
	private void setUpMessageText() {

		LinearLayout menuButton = ((LinearLayout) findViewById(R.id.menu_buttons));
		
		menuButton.findViewById(R.id.message_post_text).setVisibility(View.VISIBLE);
		
		findViewById(R.id.menu_buttons).setVisibility(View.VISIBLE);
		
		menuButton.setBackgroundDrawable(DrawableCache.getDrawable(R.drawable.event_detail_message_button, GlobalVariables.DISPLAY_WIDTH - DrawableCache.convertDpToPixel(20)).getDrawable());

	}
	
	private void showFragment(Fragment showFragment) {
		FragmentManager     fm = getSupportFragmentManager();
        ft = fm.beginTransaction();
        
        if (fm.findFragmentById(R.id.fragment_content) == null)
        {
        	ft.add(R.id.fragment_content, showFragment);
        }
        else if (!hasShownLocation)
        {
        	ft.replace(R.id.fragment_content, showFragment);
        }
        else
        {
        	Fragment fragment = fm.findFragmentById(R.id.fragment_content);
        	if (fragment == locationFragment)
        	{
        		ft.hide(locationFragment);
        		ft.add(R.id.fragment_content, showFragment);
        	}
        	else
        	{
        		ft.remove(fragment);
            	ft.add(R.id.fragment_content, showFragment);
        	}
        }
        
		ft.commit();
	}
	
    @Override
    protected void onSaveInstanceState(Bundle outState) {
        //No call for super(). Bug on API Level > 11.
    }
    
	public void myEventOccurred(UpdatedEventDetailEvent evt) {
		
		EventServiceBuffer.removeEventDetailListener(this);
		
        eDetail = dbWrapper.getEvent(mEventID); 
        
        setUpFragments();
        
        Attendee attendee = new Attendee(SharedPreferencesWrapper.getIntPref(getApplicationContext(), SharedPreferencesWrapper.USER_ID));
        
        if (dbWrapper.getAttendees(mEventID).contains(attendee))
        {
        	Set<Integer> myEvents = SharedPreferencesWrapper.getIntArrayPref(getApplicationContext(), SharedPreferencesWrapper.MY_EVENT_DETAILS);
            
        	myEvents.add(mEventID);
        	
        	SharedPreferencesWrapper.setIntArrayPref(getApplicationContext(), SharedPreferencesWrapper.MY_EVENT_DETAILS, myEvents);

        	setActionForRightMenu(takePhotoListener);
            showMenuButtons(BaseMotleeActivity.TAKE_PICTURE);
        }
        else
        {
        	setActionForRightMenu(joinMenuListener);
        	showMenuButtons(BaseMotleeActivity.JOIN_EVENT);
        }
        
    	if (mNewPhoto != null)
    	{
    		
    		EventServiceBuffer.setPhotoListener(this);
    		
    		EventServiceBuffer.sendPhotoCacheToDatabase();
    		
    		mNewPhoto.event_detail = eDetail;
    		
    		dbWrapper.createPhoto(mNewPhoto);
    		
    		showPhotos(null);
    	}
    	else if (firstScreen != null)
    	{
    		if (firstScreen.equals(PHOTOS))
    		{
    			firstScreen = null;
    			showPhotos(null);
    		}
    		else if (firstScreen.equals(MESSAGES))
    		{
    			firstScreen = null;
    			showComments(null);
    		}
    		else
    		{
    			firstScreen = null;
    			showPhotos(null);
    		}
    	}
    	else
    	{
            FragmentManager fm = getSupportFragmentManager();
            Fragment fragment = fm.findFragmentById(R.id.fragment_content);
            if (fragment != null)
            {
    			if (fragment instanceof EventDetailFragment)
    			{
    				showPhotos(null);
    			}
    			else if (fragment instanceof MessageDetailFragment)
    			{
    				showComments(null);
    			}
    			else if (fragment instanceof PeopleListFragment)
    			{
    				showFriends(null);
    			}
    			else if (fragment instanceof LocationFragment)
    			{
    				this.showMap(null);
    			}
    			else if (fragment instanceof DateDetailFragment)
    			{
    				this.showTime(null);
    			}
            }
            else
            {
            	showPhotos(null);
            }
    	}

		progressDialog.dismiss();
	}


	public void OnFragmentAttached() {
		
		if (progressDialog.isShowing())
		{
		
	        EventServiceBuffer.setEventDetailListener(this);
	        
	        EventServiceBuffer.getEventsFromService(mEventID);
	        
	        /*if (mNewPhoto != null)
	        {
	        	EventServiceBuffer.sendPhotoToDatabase(mNewPhoto.event_id, mNewPhoto.image_file_name, GlobalVariables.getInstance().getLocationInfo(), mNewPhoto.caption, mNewPhoto);
	        }*/
		}
		else
		{
			eDetail = dbWrapper.getEvent(mEventID);
			
			Fragment fragment = getSupportFragmentManager().findFragmentById(R.id.fragment_content);
			
			if (fragment instanceof EventDetailFragment)
			{
				this.photosFragment.addEventDetail(eDetail);
				//this.photosFragment.photoEvent();
			}
			else if (fragment instanceof MessageDetailFragment)
			{
				this.messageFragment.addEventDetail(eDetail);
				//this.messageFragment.refreshMessageAdapter();	
			}
			else if (fragment instanceof PeopleListFragment)
			{
				this.peopleListFragment.setEventDetail(eDetail);
				//this.peopleListFragment.setUpPeopleList();
			}
			else if (fragment instanceof LocationFragment)
			{
				this.locationFragment.clearEventList();
				this.locationFragment.addEventDetail(eDetail);
				//this.locationFragment.setMapOverlays();
			}
			else if (fragment instanceof DateDetailFragment)
			{
				this.dateFragment.addEventDetail(eDetail);
				//this.dateFragment.setDateLabels();
			}
			
		}
		
	}
	
	public void onClickOpenComment(View view)
	{
		EventItem item = (EventItem) view.getTag();
		
		Intent openComment = new Intent(EventDetailActivity.this, CommentActivity.class);
		openComment.putExtra(CommentActivity.COMMENT, item);
		openComment.putExtra(CommentActivity.EVENT_ID, mEventID);
		
		startActivity(openComment);
	}
	
	@Override
	public void showPictureDetail(View view)
	{
		GlobalActivityFunctions.showPictureDetail(view, this, false);
	}
	
	@Override
	public void onPause()
	{

		EventServiceBuffer.removePhotoListener(this);
		EventServiceBuffer.removeEventDetailListener(this);
		EventServiceBuffer.setStoryListener(null);
		super.onPause();
	}
	
    @Override
	protected void backButtonPressed()
	{
		InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
	    imm.hideSoftInputFromWindow(findViewById(android.R.id.content).getWindowToken(), 0);
	    findViewById(R.id.menu_buttons).setVisibility(View.VISIBLE);
	    super.backButtonPressed();
		//super.onBackPressed();
	}
    
    @Override
    public void onDestroy()
    {
    	EventServiceBuffer.removePhotoListener(this);
    	super.onDestroy();
    }

	public void photoEvent(UpdatedPhotoEvent e) {
		
		EventServiceBuffer.removePhotoListener(this);
		
		FragmentManager     fm = getSupportFragmentManager();
        
        Fragment fragment = fm.findFragmentById(R.id.fragment_content);
        
        if (fragment != null)
        {
	        if (fragment instanceof EventDetailFragment)
	        {
	        	((EventDetailFragment) fragment).photoEvent();
	        }
        }
        
        mNewPhoto = null;
	}
}
