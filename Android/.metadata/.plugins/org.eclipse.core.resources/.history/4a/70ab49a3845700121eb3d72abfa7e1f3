package com.motlee.android;

import java.io.File;

import com.motlee.android.object.DrawableCache;
import com.motlee.android.object.EventItem;
import com.motlee.android.object.EventServiceBuffer;
import com.motlee.android.object.GlobalActivityFunctions;
import com.motlee.android.object.GlobalVariables;
import com.motlee.android.object.MenuFunctions;
import com.motlee.android.object.NotificationList;
import com.motlee.android.object.SharePref;
import com.motlee.android.object.event.UpdatedEventDetailEvent;
import com.motlee.android.object.event.UpdatedEventDetailListener;
import com.motlee.android.object.event.UpdatedNotificationListener;
import com.motlee.android.service.RubyService;
import com.readystatesoftware.viewbadger.BadgeView;
import com.slidingmenu.lib.SlidingMenu;

import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.Gravity;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.AdapterView;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

public class BaseMotleeActivity extends FragmentActivity implements UserInfoListener, UpdatedEventDetailListener, UpdatedNotificationListener {

	public static String tag = "BaseMotleeActivity";
	
	public static final int CREATE_EVENT = 0;
	public static final int TAKE_PICTURE = 1;
	public static final int JOIN_EVENT = 2;
	
	protected ProgressDialog progressDialog;
	
	protected SlidingMenu menu;
	
	protected BadgeView menuBadge;
	protected BadgeView notificationIconBadge;
	
	private BroadcastReceiver receiver = new BroadcastReceiver() {

        @Override
        public void onReceive(Context context, Intent intent) {
            
        	if (progressDialog != null && progressDialog.isShowing())
        	{
        		progressDialog.dismiss();
        	}
        	
            showToast();

        }
    };
	
    private void showToast(){
    	Toast toast = Toast.makeText(this, "Whoops. There seems to be a connection issue.  Try again in one sec.", Toast.LENGTH_LONG);
    	TextView v = (TextView)toast.getView().findViewById(android.R.id.message);
    	if( v != null) v.setGravity(Gravity.CENTER);
    	toast.show();
    }
    
    @Override
    protected void onResume() {
    	Log.d(tag, "onResume");
    	
        IntentFilter filter = new IntentFilter();
        filter.addAction(RubyService.CONNECTION_ERROR);
        registerReceiver(receiver, filter);
        
        showMenuButtonBadge();
        
    	
        EventServiceBuffer.setNotificationListener(this);
        
        View target = findViewById(R.id.notification_icon);

        if (target != null)
        {
            ImageView image = (ImageView) findViewById(R.id.notification_icon_image);
            
            target.setLayoutParams(new FrameLayout.LayoutParams(image.getDrawable().getIntrinsicWidth() + DrawableCache.convertDpToPixel(12), image.getDrawable().getIntrinsicHeight(), Gravity.CENTER));
            target.setPadding(DrawableCache.convertDpToPixel(47), 0, DrawableCache.convertDpToPixel(47), 0);
        	if (notificationIconBadge == null)
        	{
        		notificationIconBadge = new BadgeView(this, target);
        	}
        	
        	setUpNotificationIconBadge();
        	
        	if (SharePref.getStringPref(getApplicationContext(), SharePref.AUTH_TOKEN) != "")
        	{
        		EventServiceBuffer.getNewNotificationsFromServer();
        	}
        }
        
        super.onResume();
    }

    @Override
    public void onStart()
    {
    	Log.d(tag, "onStart");
    	
    	DrawableCache.getInstance(this.getApplicationContext().getResources());
    	
    	super.onStart();
    }
    
    @Override
    public void setContentView(int layout)
    {
    	Log.d(tag, "setContentView");
    	
    	super.setContentView(layout);
    	
    	View target = findViewById(R.id.invisible_for_badge_view);
    	
    	target.setLayoutParams(new LayoutParams((int) (GlobalVariables.DISPLAY_WIDTH * 0.15), (int) (GlobalVariables.DISPLAY_WIDTH * 0.13333)));
    	
    	menuBadge = new BadgeView(this, target);
    	
    	
    }
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
    	Log.d(tag, "onCreate");
    	
    	EventServiceBuffer.getInstance(getApplicationContext());
    	
    	super.onCreate(savedInstanceState);
    }
    
    @Override
    protected void onPause() {
    	Log.d(tag, "onPause");
        unregisterReceiver(receiver);
        EventServiceBuffer.removeNotificationListener(this);
        super.onPause();
    }
    
	final public void onClickShowProfile(View view)
	{
		GlobalActivityFunctions.showProfileDetail(view, this);
	}

	final public void showStoryDetail(View view)
	{
		GlobalActivityFunctions.showStoryDetail(view, this);
	}
	
	public void showPictureDetail(View view)
	{
		GlobalActivityFunctions.showPictureDetail(view, this);
	}
	
	final public void onClickGetPhotoFromLibrary(View view)
	{
		MenuFunctions.uploadPictureFromPhone(view, this);
	}
	
	final public void onClickTakePhoto(View view)
    {
    	MenuFunctions.takePictureOnPhone(view, this);
    }
    
	final public void onClickCreateEvent(View view)
    {
    	MenuFunctions.showCreateEventPage(view, this);
    }
    
	// plus menu deprecated
	/*final public void onClickOpenPlusMenu(View view)
    {
    	MenuFunctions.openPlusMenu(view, this);
    }*/
    
    //onClickMainMenu: When user clicks on main menu button
    
	final public void onClickOpenMainMenu(View view)
    {
		menu.toggle();
    }
    
	final public void onClickShowAllEvents(View view)
	{
		menu.toggle();
		MenuFunctions.showAllEvents(view, this);
	}
	
	final public void onClickShowMyEvents(View view)
	{
		menu.toggle();
		MenuFunctions.showMyEvents(view, this);
	}
	
	final public void onClickShowNearbyEvents(View view)
	{
		menu.toggle();
		MenuFunctions.showNearbyEvents(view, this);
	}
	
	final public void onClickShowSettings(View view)
	{
		menu.toggle();
		MenuFunctions.showSettings(this);
	}
	
	final public void onClickShowSearch(View view)
	{
		menu.toggle();
		MenuFunctions.showSearchPage(this);
	}
	
	final public void onClickShowNotifications(View view)
	{
		menu.toggle();
		MenuFunctions.showNotificationsPage(view, this);
	}
	
	final public void showMenuButtons(int iconToShow)
	{
		findViewById(R.id.menu_buttons).setVisibility(View.VISIBLE);
		
		if (iconToShow == this.CREATE_EVENT)
		{
			((ImageView) findViewById(R.id.right_menu_icon)).setImageResource(R.drawable.right_menu_plus_icon);
		}
		else if (iconToShow == this.TAKE_PICTURE)
		{
			((ImageView) findViewById(R.id.right_menu_icon)).setImageResource(R.drawable.right_menu_photo_icon);
		}
		else if (iconToShow == this.JOIN_EVENT)
		{
			((ImageView) findViewById(R.id.right_menu_icon)).setImageResource(R.drawable.right_menu_join_icon);
		}
	}
	
	final public void setActionForRightMenu(OnClickListener listener)
	{
		((ImageButton) findViewById(R.id.plus_menu_button)).setOnClickListener(listener);
	}
	
	public UpdatedEventDetailListener eventListener = new UpdatedEventDetailListener(){

		public void myEventOccurred(UpdatedEventDetailEvent evt) {
			
			return;
			
		}
		
	};
	
	@Override
	final public boolean dispatchTouchEvent(MotionEvent ev) {
		
		if (MenuFunctions.onDispatchTouchOverride(ev, this))
		{
			return super.dispatchTouchEvent(ev);
		}
		else
		{
			return true;
		}
	}
	
	/*
	 * (non-Javadoc)
	 * @see android.support.v4.app.FragmentActivity#onDestroy()
	 * Override onDestroy to ensure we do not have any attachments to other
	 * objects or activities to prevent memory leaks
	 */
	@Override
	public void onDestroy()
	{
		Log.d(tag, "onDestroy");
		EventServiceBuffer.setAttendeeListener(null);
		EventServiceBuffer.removeUserInfoListener(this);
		EventServiceBuffer.removeEventDetailListener(this);
		unbindDrawables(this.findViewById(android.R.id.content));
		System.gc();
		
		if (progressDialog != null && progressDialog.isShowing())
		{
			progressDialog.dismiss();
		}
		super.onDestroy();
	}
	
	private void showExternalCacheDir() {
		
		File externalCache = getExternalCacheDir();
		File[] files = externalCache.listFiles();
		
		for (int i = 0; i < files.length; i++)
		{
			File file = files[i];
			file.delete();
		}
	}

	private void unbindDrawables(View view) {
	    if (view.getBackground() != null) {
	        view.getBackground().setCallback(null);
	        if (view instanceof ImageView)
	        {
	        	if (((ImageView) view).getDrawable() != null)
	        	{
	        		((ImageView) view).getDrawable().setCallback(null);
	        	}
	        }
	    }
	    if (view instanceof ViewGroup && !(view instanceof AdapterView)) {
	        for (int i = 0; i < ((ViewGroup) view).getChildCount(); i++) {
	            if (view.getId() != R.id.header)
	            {
	            	unbindDrawables(((ViewGroup) view).getChildAt(i));
	            }
	        }
	        if (view.getId() != R.id.header)
	        {
	        	((ViewGroup) view).removeAllViews();
	        }
	    }
	}
	
	//********************************
	// Go Back Functions to sync phone's
	// back button and our's
	//********************************
	
	@Override
	public void onBackPressed() {
		backButtonPressed();
	}
	
	/*
	 * called when on page back button pressed
	 */
	public void goBack(View view)
	{
		backButtonPressed();
	}
	
	/*
	 * defaults to the system back button functionality
	 */
	protected void backButtonPressed()
	{
		super.onBackPressed();
	}

	public void myEventOccurred(UpdatedEventDetailEvent evt) {
		// TODO Auto-generated method stub
		
	}

	private void showMenuButtonBadge() {
		
		if (NotificationList.getInstance().getNumUnreadNotifications() > 0)
        {
        	menuBadge.setText(Integer.toString(NotificationList.getInstance().getNumUnreadNotifications()));
        	menuBadge.show();
        }
        else
        {
        	if (menuBadge.isShown())
        	{
        		menuBadge.toggle();
        	}
        }
	}

	private void setUpNotificationIconBadge()
	{
		if (notificationIconBadge != null && NotificationList.getInstance().getNumUnreadNotifications() > 0)
		{
			notificationIconBadge.setText(Integer.toString(NotificationList.getInstance().getNumUnreadNotifications()));
			notificationIconBadge.show();
		}	
		else
		{
			if (notificationIconBadge != null && notificationIconBadge.isShown())
			{
				notificationIconBadge.toggle();
			}
		}
	}
	
	public void receivedNewNotifications() {
		
		showMenuButtonBadge();
		
		setUpNotificationIconBadge();
		
	}

	public void receivedAllNotifications() {
		// TODO Auto-generated method stub
		
	}
}
