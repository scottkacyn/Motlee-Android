package com.motlee.android.fragment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException;
import com.google.gson.reflect.TypeToken;

import com.motlee.android.EventListActivity;
import com.motlee.android.adapter.EventListAdapter;
import com.motlee.android.object.EventDetail;
import com.motlee.android.object.EventDetailList;
import com.motlee.android.object.Gender;
import com.motlee.android.object.LocationInfo;
import com.motlee.android.object.NoExposeExclusionStrategy;
import com.motlee.android.object.UserInfo;
import com.motlee.android.service.RubyService;

import android.app.Activity;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;

public class EventDetailResponderFragment extends ResponderFragment {
    private static String TAG = EventDetailResponderFragment.class.getName();
    
    // We cache our stored tweets here so that we can return right away
    // on multiple calls to setTweets() during the Activity lifecycle events (such
    // as when the user rotates their device). In a real application we would want
    // to cache this data in a more sophisticated way, probably using SQLite and
    // Content Providers, but for the demo and simple apps this will do.
    private List<EventDetail> mEventDetails;
    
    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        
        mEventDetails = getTweetsFromJson("");
        
        // This gets called each time our Activity has finished creating itself.
        setEventList();
    }

    private void setEventList() {
        EventListActivity activity = (EventListActivity) getActivity();
        
        if (mEventDetails == null && activity != null) {
            // This is where we make our REST call to the service. We also pass in our ResultReceiver
            // defined in the RESTResponderFragment super class.
            
            // We will explicitly call our Service since we probably want to keep it as a private
            // component in our app. You could do this with Intent actions as well, but you have
            // to make sure you define your intent filters correctly in your manifest.
            Intent intent = new Intent(activity, RubyService.class);
            intent.setData(Uri.parse("http://dev.motleeapp.com/events.json"));
            
            // Here we are going to place our REST call parameters. Note that
            // we could have just used Uri.Builder and appendQueryParameter()
            // here, but I wanted to illustrate how to use the Bundle params.
            intent.putExtra(RubyService.EXTRA_RESULT_RECEIVER, getResultReceiver());
            
            // Here we send our Intent to our RESTService.
            activity.startService(intent);
        }
        else if (activity != null) {
            // Here we check to see if our activity is null or not.
            // We only want to update our views if our activity exists.
            
            EventListAdapter adapter = activity.getEventListAdapter();
            
            // Load our list adapter with our Tweets.
            adapter.clear();
            for (EventDetail eDetail : mEventDetails) {
                adapter.add(eDetail);
            }
        }
    }
    
    @Override
    public void onRESTResult(int code, String result) {
        // Here is where we handle our REST response. This is similar to the 
        // LoaderCallbacks<D>.onLoadFinished() call from the previous tutorial.
        
        // Check to see if we got an HTTP 200 code and have some data.
        if (code == 200 && result != null) {
            
            // For really complicated JSON decoding I usually do my heavy lifting
            // with Gson and proper model classes, but for now let's keep it simple
            // and use a utility method that relies on some of the built in
            // JSON utilities on Android.
            mEventDetails = getTweetsFromJson(result);
            setEventList();
        }
        else {
            Activity activity = getActivity();
            if (activity != null) {
                Toast.makeText(activity, "Failed to load Event data. Check your internet settings.", Toast.LENGTH_SHORT).show();
            }
        }
    }
    
    private static List<EventDetail> getTweetsFromJson(String json) {
        
        EventDetailList eventDetailList = new EventDetailList();
    	
        try {
        	//json = getMockJson();
        	
        	Gson gson = new GsonBuilder()
        	.addSerializationExclusionStrategy(new NoExposeExclusionStrategy())
        	.addDeserializationExclusionStrategy(new NoExposeExclusionStrategy())
        	.create();
        	
        	eventDetailList = gson.fromJson(json, EventDetailList.class);
        	
        	/*eventDetailList.add(eDetail);
        	eventDetailList.add(eDetail);
        	eventDetailList.add(eDetail);
        	eventDetailList.add(eDetail);
        	eventDetailList.add(eDetail);*/
        	
        }
        catch (JsonSyntaxException e) {
            Log.e(TAG, "Failed to parse JSON.", e);
        }
        
        ArrayList<EventDetail> eventArrayList = new ArrayList<EventDetail>();
        
        if (eventDetailList != null)
        {
        	eventArrayList = new ArrayList<EventDetail>(eventDetailList.getEventList());
        }
        else
        {
        	eventArrayList = new ArrayList<EventDetail>();
        }
        
        return eventArrayList;
    }
    
    private static String getMockJson()
    {
    	String picURL = "http://lh3.ggpht.com/_loGyjar4MMI/S-InZA8YsZI/AAAAAAAADH8/csssVxalPcc/s144-c/Seahorse.jpg";
    	Date startTime = new Date();
    	startTime.setDate(3);
    	startTime.setMonth(10);
    	startTime.setYear(2012);
    	
    	Date endTime = new Date();
    	endTime.setDate(4);
    	endTime.setMonth(10);
    	endTime.setYear(2012);
    	
    	LocationInfo locInfo = new LocationInfo("My House", 49, -87);
    	
    	UserInfo eventOwner = new UserInfo(26, 28765, "Zachary Martinsek", "zackmartinsek@gmail.com", Gender.Male, picURL, startTime);
    	
    	UserInfo fomo1 = new UserInfo(26, 28765, "Elin Rhodus", "zackmartinsek@gmail.com", Gender.Male, picURL, startTime);
    	
    	UserInfo fomo2 = new UserInfo(26, 28765, "Brett Adlard", "zackmartinsek@gmail.com", Gender.Male, picURL, startTime);
    	
    	UserInfo attendee1 = new UserInfo(26, 28765, "Emil Martinsek", "zackmartinsek@gmail.com", Gender.Male, picURL, startTime);
    	
    	UserInfo attendee2 = new UserInfo(26, 28765, "Matt Martinsek", "zackmartinsek@gmail.com", Gender.Male, picURL, startTime);
    	
    	Collection<Integer> fomos = new ArrayList<Integer>();
    	
    	fomos.add(fomo1.userID);
    	fomos.add(fomo2.userID);
    	
    	Collection<Integer> attendees = new ArrayList<Integer>();
    	
    	attendees.add(attendee1.userID);
    	attendees.add(attendee2.userID);
    	
    	EventDetail eDetail = new EventDetail();
    	eDetail.setEventName("My Party");
    	eDetail.setStartTime(startTime);
    	eDetail.setEndTime(endTime);
    	eDetail.setLocationInfo(locInfo);
    	eDetail.getAttendees().addAll(attendees);
    	eDetail.getFomos().addAll(fomos);
    	
    	Collection<String> imageURLs = Arrays.asList(URLS);
    	
    	eDetail.getImageURLs().addAll(imageURLs);
    	
    	Gson gson = new Gson();
    	
    	return gson.toJson(eDetail);
    }
    
    private static final String[] URLS = {
        "http://red-hot-girls.com/img/red-hot-girls.com/img2/20120312/200/hot_girls_just_wanna_have_fun_200_40.jpg",
        "http://img.red-hot-girls.com/img/red-hot-girls.com/img2/20120604/200/hot_girls_with_body_paint_on_their_boobs_200_08.jpg",
        "http://red-hot-girls.com/img/red-hot-girls.com/img1/20110310/200/hot_hooters_girls_200_01.jpg",
        "http://www.coolcarshotgirls.com/wp-content/uploads/2012/04/1440x900-e1335051383553.jpg",
        "http://1.media.collegehumor.cvcdn.com/62/44/collegehumor.9cb4c4cbaf979b21040e4217d531bf76.jpg"
    };
    
}
