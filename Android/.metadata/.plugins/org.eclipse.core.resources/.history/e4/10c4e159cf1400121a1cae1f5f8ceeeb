package com.motlee.android.fragment.responder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.JsonSyntaxException;
import com.google.gson.reflect.TypeToken;

import com.motlee.android.EventListActivity;
import com.motlee.android.adapter.EventListAdapter;
import com.motlee.android.enums.EventItemType;
import com.motlee.android.enums.Gender;
import com.motlee.android.event.UserInfoEvent;
import com.motlee.android.event.UserInfoListener;
import com.motlee.android.object.EventDetail;
import com.motlee.android.object.EventItem;
import com.motlee.android.object.GlobalEventList;
import com.motlee.android.object.LocationInfo;
import com.motlee.android.object.NoExposeExclusionStrategy;
import com.motlee.android.object.PhotoItem;
import com.motlee.android.object.UserInfo;
import com.motlee.android.object.UserInfoList;
import com.motlee.android.service.RubyService;

import android.app.Activity;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;

public class EventDetailResponderFragment extends ResponderFragment {
    private static String TAG = EventDetailResponderFragment.class.getName();
    
    // We cache our stored tweets here so that we can return right away
    // on multiple calls to setTweets() during the Activity lifecycle events (such
    // as when the user rotates their device). In a real application we would want
    // to cache this data in a more sophisticated way, probably using SQLite and
    // Content Providers, but for the demo and simple apps this will do.
    private List<Integer> mEventDetails;
    
    public static final int eventSuccessCode = 200 + RubyService.EVENT;
    public static final int userSuccessCode = 200 + RubyService.USER;
    public static final int storySuccessCode = 200 + RubyService.STORY;
    
    private static UserInfoList userInfoList = UserInfoList.getInstance();
    
    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        
        Log.d(TAG, "onActivityCreated");
        
        mEventDetails = getEventsFromJson("");        
        
        GlobalEventList.getInstance();
        
        // This gets called each time our Activity has finished creating itself.
        setEventList();
    }

    private void setEventList() {
        EventListActivity activity = (EventListActivity) getActivity();
        
        if (mEventDetails == null && activity != null) {
            // This is where we make our REST call to the service. We also pass in our ResultReceiver
            // defined in the RESTResponderFragment super class.
            
            // We will explicitly call our Service since we probably want to keep it as a private
            // component in our app. You could do this with Intent actions as well, but you have
            // to make sure you define your intent filters correctly in your manifest.
            Intent intent = new Intent(activity, RubyService.class);
            intent.setData(Uri.parse("http://dev.motleeapp.com/events.json"));
            
            // Here we are going to place our REST call parameters. Note that
            // we could have just used Uri.Builder and appendQueryParameter()
            // here, but I wanted to illustrate how to use the Bundle params.
            intent.putExtra(RubyService.EXTRA_RESULT_RECEIVER, getResultReceiver());
            intent.putExtra(RubyService.EXTRA_HTTP_VERB, RubyService.GET);
            intent.putExtra(RubyService.EXTRA_DATA_CONTENT, RubyService.EVENT);
            // Here we send our Intent to our RESTService.
            activity.startService(intent);
        }
        else if (activity != null) {
            // Here we check to see if our activity is null or not.
            // We only want to update our views if our activity exists.
            
            EventListAdapter adapter = activity.getEventListAdapter();
            
            // Load our list adapter with our Tweets.
            adapter.clear();
            for (Integer eventID : mEventDetails) {
                adapter.add(eventID);
            }
        }
    }
    
    private void setStoriesForEvent(int eventID)
    {
    	EventListActivity activity = (EventListActivity) getActivity();
    	
        Intent intent = new Intent(activity, RubyService.class);
        
        String uri = "http://dev.motleeapp.com/events/" + eventID + "/stories.json";
        
        intent.setData(Uri.parse(uri));
        
        // Here we are going to place our REST call parameters. Note that
        // we could have just used Uri.Builder and appendQueryParameter()
        // here, but I wanted to illustrate how to use the Bundle params.
        intent.putExtra(RubyService.EXTRA_RESULT_RECEIVER, getResultReceiver());
        intent.putExtra(RubyService.EXTRA_HTTP_VERB, RubyService.GET);
        intent.putExtra(RubyService.EXTRA_DATA_CONTENT, RubyService.STORY);
        
        // Here we send our Intent to our RESTService.
        activity.startService(intent);
    }
    
    @Override
    public void onRESTResult(int code, String result) {
        // Here is where we handle our REST response. This is similar to the 
        // LoaderCallbacks<D>.onLoadFinished() call from the previous tutorial.
        
        // Check to see if we got an HTTP 200 code and have some data.
        if (code == eventSuccessCode && result != null) {
            
            // For really complicated JSON decoding I usually do my heavy lifting
            // with Gson and proper model classes, but for now let's keep it simple
            // and use a utility method that relies on some of the built in
            // JSON utilities on Android.
            mEventDetails = getEventsFromJson(result);
            setEventList();
        }
        else if (code == userSuccessCode && result != null)
        {
        	getUserInfoFromJson(result);
        }
        else if (code == storySuccessCode && result != null)
        {
        	getStoryInfoFromJson(result);
        }
        else {
            Activity activity = getActivity();
            if (activity != null) {
                Toast.makeText(activity, "Failed to load Event data. Check your internet settings.", Toast.LENGTH_SHORT).show();
            }
        }
    }
    
    private void getStoryInfoFromJson(String json) {
		Gson gson = new Gson();
		
    	JsonParser parser = new JsonParser();
    	
    	JsonArray array = new JsonArray();
    	
    	if (json.length() > 0)
    	{
    	
    		array = parser.parse(json).getAsJsonArray();
    		
    		Log.d(TAG, array.toString());
    	}
		
    	for (JsonElement element : array)
    	{
    		EventItem story = gson.fromJson(element, StoryHolder.class).story;
    		
    		story.type = EventItemType.STORY;
    		
    		for (EventItem comment : story.comments)
    		{
    			comment.type = EventItemType.COMMENT;
    		}
    		
    		GlobalEventList.eventDetailMap.get(story.event_id).getStories().add(story);
    	}

		
	}

    private class StoryHolder
    {
    	public EventItem story;
    	
    	public StoryHolder()
    	{
    		
    	}
    }
    
	private static void getUserInfoFromJson(String json)
    {
    	Gson gson = new Gson();
    	
    	UserInfo userInfo = gson.fromJson(json, UserInfo.class);
    	
    	userInfoList.put(userInfo.userID, userInfo);
    }
    
    private List<Integer> getEventsFromJson(String json) 
    {
        
        Log.d(TAG, "getTweetsFromJson");
    	
        ArrayList<Integer> eventArrayList = null;
        
        try {
        	//json = getMockJson();
        	
        	JsonParser parser = new JsonParser();
        	
        	JsonArray array = new JsonArray();
        	
        	if (json.length() > 0)
        	{
        	
        		array = parser.parse(json).getAsJsonArray();
        		
        		Log.d(TAG, array.toString());
        	}
        	Gson gson = new GsonBuilder()
        	.addDeserializationExclusionStrategy(new NoExposeExclusionStrategy())
        	.create();
        	
        	if (array.size() > 0)
        	{
        		eventArrayList = new ArrayList<Integer>();
        	}
        	for (JsonElement element : array)
        	{
       		    EventDetail eDetail = gson.fromJson(element, EventDetailHolder.class).event;
        		
       		    eDetail.getImages().clear();
       		    
       		    for (int i = 0; i < URLS.length; i++)
       		    {
       		    	PhotoItem photo = new PhotoItem(eDetail.getEventID(), "Hot Tits!", EventItemType.PICTURE, eDetail.getOwnerID(), new Date(), URLS[i]);
       		    	
       		    	eDetail.getImages().add(photo);
       		    }
       		    
        		GlobalEventList.eventDetailMap.put(eDetail.getEventID(), eDetail);
        		
                //eDetail.addListener(userListener);
        		
        		eventArrayList.add(eDetail.getEventID());
        		
        		setStoriesForEvent(eDetail.getEventID());
        	}
        	
        	/*eventArrayList = new ArrayList<EventDetail>();
        	
        	EventDetail eDetail = gson.fromJson(getMockJson(), EventDetail.class);
        	
        	eventArrayList.add(eDetail);
        	eventArrayList.add(eDetail);
        	eventArrayList.add(eDetail);
        	eventArrayList.add(eDetail);
        	eventArrayList.add(eDetail);*/
        	
        }
        catch (Exception e) {
            Log.e(TAG, "Failed to parse JSON.", e);
        }
        
        return eventArrayList;
    }
    
    private class EventDetailHolder
    {
    	public EventDetail event;
    	
    	public EventDetailHolder()
    	{
    		
    	}
    }
    
    private static final String[] URLS = {
        "http://red-hot-girls.com/img/red-hot-girls.com/img2/20120312/200/hot_girls_just_wanna_have_fun_200_40.jpg",
        "http://img.red-hot-girls.com/img/red-hot-girls.com/img2/20120604/200/hot_girls_with_body_paint_on_their_boobs_200_08.jpg",
        "http://red-hot-girls.com/img/red-hot-girls.com/img1/20110310/200/hot_hooters_girls_200_01.jpg",
        "http://www.coolcarshotgirls.com/wp-content/uploads/2012/04/1440x900-e1335051383553.jpg",
        "http://1.media.collegehumor.cvcdn.com/62/44/collegehumor.9cb4c4cbaf979b21040e4217d531bf76.jpg"
    };
    
}
