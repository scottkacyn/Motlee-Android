/*
 * Copyright (C) 2010 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.motlee.android.adapter;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Vector;

import com.motlee.android.R;
import com.motlee.android.object.EventServiceBuffer;
import com.motlee.android.object.GlobalVariables;
import com.motlee.android.object.PhotoItem;
import com.motlee.android.object.event.UpdatedPhotoEvent;
import com.motlee.android.object.event.UpdatedPhotoListener;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.ImageScaleType;
import com.nostra13.universalimageloader.core.display.SimpleBitmapDisplayer;

import android.content.Context;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;

public class ImageAdapter extends BaseAdapter {

	private final Context context;
	private final int resource;
	private final LayoutInflater inflater;
	
	private static final int MAX_SIZE = 6;
	private static final int MIN_SIZE = 3;
	
	private static final String NO_URL = "nourl";
	
    private Vector<String> URLS = new Vector<String>();
    
    public ImageAdapter(Context context, int resource)
    {
    	super();
    	
    	this.context = context;
    	this.resource = resource;
    	this.inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    	
    	for (int i = 0; i < MIN_SIZE; i++)
    	{
    		URLS.add(NO_URL);
    	}
    }
    
    public int getCount() {
        return URLS.size();
    }

    public String getItem(int position) {
        return URLS.get(position);
    }

    public long getItemId(int position) {
        return URLS.get(position).hashCode();
    }

    public void setURLs(ArrayList<PhotoItem> photos)
    {
    	Collections.sort(photos);
    	
    	this.URLS.clear();
    	
    	// Set last position in list we load into ImageAdapter
    	// Equals MAX_SIZE or total photos size whichever is smaller
    	int lastPosition = MAX_SIZE;
    	if (lastPosition > photos.size())
    	{
    		lastPosition = photos.size();
    	}
    	
    	// Adds all images to URLS list (starting from back, sorted by date, asceding)
    	for (int i = lastPosition - 1; i >= 0; i--)
    	{
    		this.URLS.add(GlobalVariables.getInstance().getAWSUrlThumbnail(photos.get(i)));
    	}
    	
    	// Adds placeholder if photos list is not larger than MIN_SIZE
    	for (int j = lastPosition; j < MIN_SIZE; j++)
    	{
    		this.URLS.add(NO_URL);
    	}

    	this.notifyDataSetChanged();
    }
    
    public View getView(int position, View contentView, ViewGroup parent) {
        
    	ViewHolder holder = new ViewHolder();
    	
    	if (contentView == null) {
            contentView = (View) this.inflater.inflate(resource, null);
            
            holder.imageThumbnail = (ImageView) contentView.findViewById(R.id.imageThumbnail);
            
            contentView.setTag(holder);
        }
    	else
    	{
    		// For some reason, the contentView is not the entire resource
    		// but rather just imageView. Not sure what's going on, but this
    		// snippet of code fixes the problem
    		if (contentView instanceof ImageView)
    		{
    			if (contentView.getTag() == null)
    			{
    				holder.imageThumbnail = (ImageView) contentView;
    				contentView.setTag(holder);
    			}
    			else
    			{
    				holder = (ViewHolder) contentView.getTag();
    			}
    		}
    		else
    		{
    			holder = (ViewHolder) contentView.getTag();
    		}
    	}
    	
    	if (URLS.get(position) == NO_URL)
    	{
    		holder.imageThumbnail.setClickable(false);
    	}
    	GlobalVariables.getInstance().downloadThumbnailImage(context, holder.imageThumbnail, URLS.get(position));

        holder.imageThumbnail.setVisibility(View.VISIBLE);
        
        return holder.imageThumbnail;
    }

    private class ViewHolder
    {
    	public ImageView imageThumbnail;
    }
}














