package com.motlee.android.object;

import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import android.content.Context;
import android.util.Log;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.motlee.android.database.DatabaseWrapper;
import com.motlee.android.enums.NotificationObjectType;

public class NotificationList 
{
	private Integer numUnreadNotifications = 0;
	private ArrayList<Notification> mNotifications = new ArrayList<Notification>();
	
	private NotificationList()
	{
		
	}
	
	private static NotificationList instance;
	
	public static synchronized NotificationList getInstance()
	{
		if (instance == null)
		{
			instance = new NotificationList();
		}
		return instance;
	}
	
	public void setNumUnreadNotifications(Integer count)
	{
		this.numUnreadNotifications = count;
	}
	
	public Integer getNumUnreadNotifications()
	{
		return this.numUnreadNotifications;
	}
	
	public ArrayList<Notification> getNotificationList()
	{
		return mNotifications;
	}
	
	public void setNewNotificationNumber(String notificationJson, Context context)
	{
		Settings settings = SharePref.getSettings(context);
		
		DatabaseWrapper dbWrapper = new DatabaseWrapper(context);
		
		JsonParser parser = new JsonParser();
		
		JsonArray array = parser.parse(notificationJson).getAsJsonArray();
		
		for (JsonElement element : array)
		{
			try
			{
				Notification notification = getNotification(element.getAsString());
				if (dbWrapper.getUser(notification.userId) != null && filterNotification(notification, settings))
				{
					mNotifications.add(notification);
				}
			}
			catch (ClassCastException ex)
			{
				Log.e("NotificationList", "Ran into problem parsing notification");
			}
		}
	}
	
	public void setNotificationList(String notificationJson, Context context)
	{
		mNotifications.clear();
		
		DatabaseWrapper dbWrapper = new DatabaseWrapper(context);
		
		JsonParser parser = new JsonParser();
		
		JsonArray array = parser.parse(notificationJson).getAsJsonArray();
		
		for (JsonElement element : array)
		{
			try
			{
				Notification notification = getNotification(element.getAsString());
				if (dbWrapper.getUser(notification.userId) != null)
				{
					mNotifications.add(notification);
				}
			}
			catch (ClassCastException ex)
			{
				Log.e("NotificationList", "Ran into problem parsing notification");
			}
		}
	}
	
	private Notification getNotification(String notification) throws ClassCastException
	{
		String[] splitString = notification.split("\\|");
		
		Notification returnNotification = new Notification();
		
		try
		{
			returnNotification.message = splitString[0];
			returnNotification.objectType = getNotificationObjectType(splitString[1]);
			returnNotification.objectId = Integer.parseInt(splitString[2]);
			returnNotification.userId = Integer.parseInt(splitString[3]);			
			returnNotification.timeCreated = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").parse(splitString[4]);
		}
		catch (ClassCastException ex)
		{
			splitString = notification.split(":");
			
			returnNotification = new Notification();
			
			returnNotification.message = splitString[0];
			returnNotification.objectType = getNotificationObjectType(splitString[1]);
			returnNotification.objectId = Integer.parseInt(splitString[2]);
			returnNotification.userId = Integer.parseInt(splitString[3]);
		} 
		catch (ArrayIndexOutOfBoundsException ex)
		{
			splitString = notification.split(":");
			
			returnNotification = new Notification();
			
			returnNotification.message = splitString[0];
			returnNotification.objectType = getNotificationObjectType(splitString[1]);
			returnNotification.objectId = Integer.parseInt(splitString[2]);
			returnNotification.userId = Integer.parseInt(splitString[3]);
		}
		catch (ParseException e) 
		{
			e.printStackTrace();
		}
		return returnNotification;
	}
	
	private NotificationObjectType getNotificationObjectType(String string) throws ClassCastException
	{
		NotificationObjectType type = NotificationObjectType.EVENT;
		
		if (string.equals("event"))
		{
			type = NotificationObjectType.EVENT;
		}
		else if (string.equals("event_story"))
		{
			type = NotificationObjectType.EVENT_MESSAGE;
		}
		else if (string.contains("friend"))
		{
			type = NotificationObjectType.FRIEND;
		}
		else if (string.contains("photo_comment"))
		{
			type = NotificationObjectType.PHOTO_COMMENT;
		}
		else if (string.contains("photo_like"))
		{
			type = NotificationObjectType.PHOTO_LIKE;
		}
		else
		{
			throw new ClassCastException();
		}
		
		return type;
	}
	
	private boolean filterNotification(Notification notification, Settings settings)
	{
		if (notification.objectType == NotificationObjectType.EVENT)
		{
			if (settings.on_event_invite)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		else if (notification.objectType == NotificationObjectType.EVENT_MESSAGE)
		{
			if (settings.on_event_message)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		else if (notification.objectType == NotificationObjectType.FRIEND)
		{
			if (settings.on_friend_join)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		else if (notification.objectType == NotificationObjectType.PHOTO_COMMENT)
		{
			if (settings.on_photo_comment)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		else if (notification.objectType == NotificationObjectType.PHOTO_LIKE)
		{
			if (settings.on_photo_like)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		return true;
	}
}
