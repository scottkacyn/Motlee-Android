package com.motlee.android.adapter;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Vector;

import com.motlee.android.R;
import com.motlee.android.database.DatabaseWrapper;
import com.motlee.android.object.DateStringFormatter;
import com.motlee.android.object.DrawableCache;
import com.motlee.android.object.DrawableWithHeight;
import com.motlee.android.object.EventDetail;
import com.motlee.android.object.GlobalVariables;
import com.motlee.android.object.LocationInfo;
import com.motlee.android.object.PhotoItem;
import com.motlee.android.object.SharePref;
import com.motlee.android.object.UserInfo;
import com.motlee.android.view.CustomAdapterView;
import com.motlee.android.view.CustomAdapterView.OnItemLongClickListener;
import com.motlee.android.view.EcoGallery;
import com.devsmart.android.ui.HorizontalListView;

import android.content.Context;
import android.util.Log;
import android.view.GestureDetector;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

public class EventListAdapter extends ArrayAdapter<EventDetail> {
	
	private String tag = "EventListAdapter";
	        // store the context (as an inflated layout)
	
	private GestureDetector gestureDetector;
	private OnTouchListener gestureListener;
	
	//Default Integer to represent the "Load More Button"
	private static final Integer LOAD_MORE_BUTTON = -9999;
	
	private static final int SWIPE_MAX_OFF_PATH = 250;
	
	private static final Integer LOAD_MORE = 1;
	private static final Integer EVENT_ITEM = 2;
	private static final EventDetail SPACE = null;

        private LayoutInflater inflater;
        // store the resources
        private int resource;
        
        private Context mContext;
        
        // store (a reference to) the data
        private Vector<EventDetail> data = new Vector<EventDetail>();
        
        private HashMap<Integer, ArrayList<PhotoItem>> eventPhotos = new HashMap<Integer, ArrayList<PhotoItem>>();
        
        private DatabaseWrapper dbWrapper;
        
        /**
* Default constructor. Creates the new Adaptor object to
* provide a ListView with data.
* @param context
* @param resource
* @param data
*/
        public EventListAdapter(Context context, int resource, ArrayList<EventDetail> data) {
         super(context, resource, data);
             Log.w(tag, "constructor");
             this.mContext = context;
                this.inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                this.resource = resource;
                this.data.addAll(data);
                
                dbWrapper = new DatabaseWrapper(context.getApplicationContext());
                
                if (this.data.size() < 4)
                {
                 this.data.add(SPACE);
                }
                //this.data.add(LOAD_MORE_BUTTON);
        }

        @Override
        public boolean isEmpty()
        {
         return false;
        }
        
        public Collection<EventDetail> getData()
        {
        	return this.data;
        }
        
        /**
* Return the size of the data set.
*/
        public int getCount() {
                return this.data.size();
        }
        
        /**
* Return an object in the data set.
*/
        public EventDetail getItem(int position) {
            return this.data.get(position);
        }
        
        /**
* Return the position provided.
*/
        public long getItemId(int position) {
                return position;
        }

        public void add(EventDetail eventID)
        {
	         Log.w(tag, "add");
	         if (!this.data.contains(eventID))
	         {
				this.data.add(eventID);
	         }
        }
        
        public void addAll(ArrayList<EventDetail> eventIds)
        {
         this.data.addAll(eventIds);
         if (eventIds.size() < 4)
         {
         this.data.add(SPACE);
         }
         //this.notifyDataSetChanged();
        }
        
        public void clear()
        {
         Log.w(tag, "clear");
         this.data.clear();
        
         //this.notifyDataSetChanged();
        }
        
        
        /**
* Return a generated view for a position.
*/
        public View getView(int position, View convertView, ViewGroup parent) {
        	
                ViewHolder holder = new ViewHolder();
                
                if (convertView == null) {
                 Log.w(tag, "inflating resource: " + resource);
				convertView = this.inflater.inflate(resource, parent, false);
				
				holder.event_background = (RelativeLayout) convertView.findViewById(R.id.event_list_detail_background);
				holder.event_footer_background = (LinearLayout) convertView.findViewById(R.id.event_footer);
				holder.event_header_button = (LinearLayout) convertView.findViewById(R.id.event_header);
				holder.event_header_name = (TextView) convertView.findViewById(R.id.event_header_name);
				holder.event_header_time = (TextView) convertView.findViewById(R.id.event_header_time);
				holder.list_view = (HorizontalListView) convertView.findViewById(R.id.listview);
				holder.event_footer_owner = (TextView) convertView.findViewById(R.id.event_footer_owner);
				holder.event_footer_location = (TextView) convertView.findViewById(R.id.event_footer_location);
				holder.imageAdapter = new ImageAdapter(mContext, R.layout.thumbnail);
				holder.blank_space = (LinearLayout) convertView.findViewById(R.id.blank_space);
				holder.event_header_icon = (ImageView) convertView.findViewById(R.id.event_header_icon);
				holder.event_footer_people = (TextView) convertView.findViewById(R.id.event_footer_people);
				convertView.setTag(holder);
                
                } else {
                        holder = (ViewHolder) convertView.getTag();
                }

                this.bindData(holder, position, convertView);

                // bind the data to the view object
                return convertView;
        }
        
        /**
* Bind the provided data to the view.
* This is the only method not required by base adapter.
*/
        public void bindData(ViewHolder holder, int position, View convertView) {
                
         if (this.data.get(position) == SPACE)
         {
	         LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(GlobalVariables.DISPLAY_WIDTH, GlobalVariables.DISPLAY_HEIGHT);
	        
	         holder.blank_space.setLayoutParams(params);
	        
	         holder.blank_space.setVisibility(View.VISIBLE);
	        
	         holder.event_background.setVisibility(View.GONE);
         }
         else
         {
                // pull out the object
                EventDetail item = this.data.get(position);

                String dateString = DateStringFormatter.getEventDateString(item.getStartTime(), item.getEndTime());
		        
				 holder.blank_space.setVisibility(View.GONE);
				
				 holder.event_background.setVisibility(View.VISIBLE);
		
				if (holder.event_background.getBackground() == null)
				{
					DrawableWithHeight drawable = DrawableCache.getDrawable(R.drawable.event_list_detail_background, GlobalVariables.DISPLAY_WIDTH);
					holder.event_background.setBackgroundDrawable(drawable.getDrawable());
					//holder.event_background.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, drawable.getHeight()));
				}
				
				if (holder.event_header_button.getBackground() == null)
				{
					DrawableWithHeight drawable = DrawableCache.getDrawable(R.drawable.event_list_detail_header_background, GlobalVariables.DISPLAY_WIDTH);
					holder.event_header_button.setBackgroundDrawable(drawable.getDrawable());
					holder.event_header_button.setLayoutParams(new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, drawable.getHeight()));
				}
				
				if (holder.event_footer_background.getBackground() == null)
				{
					DrawableWithHeight drawable = DrawableCache.getDrawable(R.drawable.event_list_detail_footer_background, GlobalVariables.DISPLAY_WIDTH);
					holder.event_footer_background.setBackgroundDrawable(drawable.getDrawable());
					//holder.event_footer_background.setLayoutParams(new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, drawable.getHeight()));
				}
				
				CharSequence charSequence = Integer.toString(item.getEventID());
				holder.event_header_button.setContentDescription(charSequence);
				
				boolean isAttending = SharePref.getIntArrayPref(getContext(), SharePref.MY_EVENT_DETAILS).contains(item.getEventID());
				
				if (item.getOwnerID() == SharePref.getIntPref(getContext().getApplicationContext(), SharePref.USER_ID))
				{
					holder.event_header_icon.setVisibility(View.VISIBLE);
					holder.event_header_icon.setImageDrawable(this.mContext.getResources().getDrawable(R.drawable.icon_button_gear));
				}
				else if (isAttending)
				{
					holder.event_header_icon.setVisibility(View.VISIBLE);
					holder.event_header_icon.setImageDrawable(this.mContext.getResources().getDrawable(R.drawable.icon_button_star));
				}
				else
				{
					holder.event_header_icon.setVisibility(View.GONE);
					//holder.event_header_icon.setImageResource(android.R.color.transparent);
				}
				
				// set the value
				holder.event_header_name.setText(item.getEventName());
				holder.event_header_name.setTypeface(GlobalVariables.getInstance().getGothamLightFont());
				
				holder.event_header_time.setText(dateString);
				holder.event_header_time.setTypeface(GlobalVariables.getInstance().getGothamLightFont());
				
				String attendeeText = "";
				if (item.getAttendeeCount() > 1)
				{
					holder.event_footer_people.setText(" + " + (item.getAttendeeCount() - 1));
					holder.event_footer_people.setTypeface(GlobalVariables.getInstance().getGothamLightFont());
					holder.event_footer_people.setVisibility(View.VISIBLE);
				}
				else
				{
					holder.event_footer_people.setVisibility(View.GONE);
				}
				
				UserInfo eventOwner = item.getOwnerInfo();
				
				if (eventOwner.first_name == null || eventOwner.last_name == null)
				{
					String[] ownerArray = eventOwner.name.split("\\s+");
					
					if (ownerArray.length > 1)
					{
						holder.event_footer_owner.setText(ownerArray[0].substring(0, 1) + ". " + ownerArray[ownerArray.length - 1]);
					}
					else
					{
						holder.event_footer_owner.setText(eventOwner.name);
					}
				}
				else
				{
					holder.event_footer_owner.setText(eventOwner.first_name.substring(0, 1) + ". " + eventOwner.last_name);
				}
				
				
				//holder.event_footer_owner.setText(item.getEventOwner().first_name.substring(0, 1) + ". CrazyAssMotherFuckinLongLastName");
				holder.event_footer_owner.setTypeface(GlobalVariables.getInstance().getGothamLightFont());
				
				LocationInfo location = item.getLocationInfo();
				
				if (location != null)
				{
					holder.event_footer_location.setText(location.name);
				}
				else
				{
					holder.event_footer_location.setText("No Location");
				}
				
				holder.event_footer_location.setTypeface(GlobalVariables.getInstance().getGothamLightFont());
				
				holder.imageAdapter.setEventId(item.getEventID());
				
				if (isAttending)
				{
					holder.imageAdapter.setIsAttending(true);
				}
				else
				{
					holder.imageAdapter.setIsAttending(false);
				}
				
				ArrayList<String> imageURLs = new ArrayList<String>();

				ArrayList<PhotoItem> photos = item.getPhotos();
				
				for (PhotoItem photo : photos)
				{
					imageURLs.add(GlobalVariables.getInstance().getAWSUrlThumbnail(photo));
				}

				holder.imageAdapter.setURLs(photos);
				
				holder.list_view.setEventId(item.getEventID());
				holder.list_view.setIsAttending(isAttending);
				
				if (holder.list_view.getAdapter() == null)
				{					
					holder.list_view.setAdapter(holder.imageAdapter);
				}

         	}
        }
        
        private static class ViewHolder {
            public LinearLayout event_header_button;
            public TextView event_header_name;
            public TextView event_header_time;
            public TextView event_footer_owner;
            public TextView event_footer_location;
            public HorizontalListView list_view;
            public ImageAdapter imageAdapter;
            public RelativeLayout event_background;
            public LinearLayout event_footer_background;
            public LinearLayout blank_space;
            public ImageView event_header_icon;
            public TextView event_footer_people;
        }


}


