package com.motlee.android;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import com.google.android.maps.MapView;
import com.motlee.android.enums.EventItemType;
import com.motlee.android.fragment.DateDetailFragment;
import com.motlee.android.fragment.EmptyFragmentWithCallbackOnResume;
import com.motlee.android.fragment.EmptyFragmentWithCallbackOnResume.OnFragmentAttachedListener;
import com.motlee.android.fragment.EventDetailFragment;
import com.motlee.android.fragment.LocationFragment;
import com.motlee.android.fragment.MessageDetailFragment;
import com.motlee.android.fragment.PeopleListFragment;
import com.motlee.android.object.DrawableCache;
import com.motlee.android.object.EventDetail;
import com.motlee.android.object.EventItem;
import com.motlee.android.object.EventServiceBuffer;
import com.motlee.android.object.GlobalEventList;
import com.motlee.android.object.GlobalVariables;
import com.motlee.android.object.Like;
import com.motlee.android.object.MenuFunctions;
import com.motlee.android.object.PhotoItem;
import com.motlee.android.object.StoryItem;
import com.motlee.android.object.UserInfo;
import com.motlee.android.object.UserInfoList;
import com.motlee.android.object.event.UpdatedAttendeeEvent;
import com.motlee.android.object.event.UpdatedAttendeeListener;
import com.motlee.android.object.event.UpdatedEventDetailEvent;
import com.motlee.android.object.event.UpdatedEventDetailListener;
import com.motlee.android.object.event.UpdatedLikeEvent;
import com.motlee.android.object.event.UpdatedLikeListener;
import com.motlee.android.object.event.UpdatedPhotoEvent;
import com.motlee.android.object.event.UpdatedPhotoListener;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;

public class EventDetailActivity extends BaseDetailActivity implements OnFragmentAttachedListener, UpdatedEventDetailListener, UpdatedPhotoListener {

	private FragmentTransaction ft;
	private ProgressDialog progressDialog;
	private int mEventID;
	
	private EventDetailFragment photosFragment;
	private PeopleListFragment peopleListFragment;
	private LocationFragment locationFragment;
	private DateDetailFragment dateFragment;
	private MessageDetailFragment messageFragment;
	
	private boolean hasShownLocation = false;
	
	private MapView mapView;
	
	private View header;
	
	private Handler handler = new Handler();
	
	private HashMap<Integer, ImageButton> likeButtons = new HashMap<Integer, ImageButton>();
	
	private PhotoItem mNewPhoto;
	
	private AlertDialog alertDialog;
	
	/*
	 * (non-Javadoc)
	 * @see com.google.android.maps.MapActivity#onNewIntent(android.content.Intent)
	 * We override onNewIntent. This is a singleTask Activity so we need to load the 
	 * new event data into the existing fragment
	 */
	@Override
	public void onNewIntent(Intent intent)
	{
		
		mEventID = intent.getExtras().getInt("EventID");
		mNewPhoto = intent.getParcelableExtra("NewPhoto");
		
		eDetail = GlobalEventList.eventDetailMap.get(mEventID);
		
		setUpFragments();
	}

	@Override
	public void onResume()
	{
		super.onResume();
		
		eDetail = GlobalEventList.eventDetailMap.get(mEventID);
		
		setUpFragments();
		
		if (findViewById(R.id.header) == null)
		{
			setContentView(R.layout.main);
		}
	}
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        Log.d(this.toString(), "onCreate");
        
        setContentView(R.layout.main);
        
        View mainLayout = findViewById(R.id.main_frame_layout);
        mainLayout.setClickable(true);
        //mainLayout.setOnClickListener(onClick);
        
        mEventID = getIntent().getExtras().getInt("EventID");
        
        eDetail = GlobalEventList.eventDetailMap.get(mEventID);
        
        header = findViewById(R.id.header);
        mNewPhoto = getIntent().getParcelableExtra("NewPhoto");
        
        progressDialog = ProgressDialog.show(EventDetailActivity.this, "", "Loading");
        
        showMenuButtons();
        
        EventServiceBuffer.setPhotoListener(this);
        
        FragmentManager fm = getSupportFragmentManager();
        ft = fm.beginTransaction();
        
        ft.add(new EmptyFragmentWithCallbackOnResume(), "EmptyFragment")
        .commit();
        
    }

	private void setUpFragments() {
		
    	photosFragment = setUpPhotosFragment();
		
    	peopleListFragment = setUpFriendsFragment();
    	
    	locationFragment = setUpLocationFragment();
    	
    	dateFragment = setUpDateFragment();
    	
    	messageFragment = setUpMessageFragment();
	}

	private OnClickListener takePhotoListener = new OnClickListener(){

		public void onClick(View v) {
			
			MenuFunctions.takePictureOnPhone(mEventID, EventDetailActivity.this);
			
		}
		
	};
	
	private OnClickListener joinMenuListener = new OnClickListener(){

		public void onClick(View v) {
			
			AlertDialog.Builder builder = new AlertDialog.Builder(EventDetailActivity.this);
			builder.setMessage("Join This Event?")
			.setCancelable(true)
			.setPositiveButton("Join!", joinListener)
			.setNegativeButton("Nope", new DialogInterface.OnClickListener() {
				public void onClick(DialogInterface dialog, int id) {
					dialog.cancel();
				}
			});
			
			builder.create().show();
			
		}
		
	};
	
	public DialogInterface.OnClickListener joinListener = new DialogInterface.OnClickListener() {
		public void onClick(DialogInterface dialog, int id) {
			
			EventServiceBuffer.setAttendeeListener(attendeeListener);

			progressDialog = ProgressDialog.show(EventDetailActivity.this, "", "Loading");
			
			ArrayList<Integer> attendees = new ArrayList<Integer>();
			attendees.add(UserInfoList.getInstance().get(GlobalVariables.getInstance().getUserId()).uid);
			
			EventServiceBuffer.joinEvent(eDetail.getEventID());
		}
	};
	
	/*private OnClickListener onClick = new OnClickListener(){

		public void onClick(View view) {
			
			InputMethodManager imm = (InputMethodManager) view.getContext()
		            .getSystemService(Context.INPUT_METHOD_SERVICE);
		    imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
		    
		    EventDetailFragment fragment = (EventDetailFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_content);
		    
		    if (fragment != null)
		    {
		    	fragment.clearEditTextFocus();
		    }
		}
    	
    };*/
    
    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);

        // Checks whether a hardware keyboard is available
        if (newConfig.hardKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_NO) {
            //Toast.makeText(this, "keyboard visible", Toast.LENGTH_SHORT).show();
        } else if (newConfig.hardKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_YES) {
		    EventDetailFragment fragment = (EventDetailFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_content);
		    
		    if (fragment != null)
		    {
		    	fragment.clearEditTextFocus();
		    }
        }
    }
    
	private MessageDetailFragment setUpMessageFragment() {

		eDetail = GlobalEventList.eventDetailMap.get(mEventID);
        
        MessageDetailFragment messageFragment = new MessageDetailFragment();
        
        messageFragment.setHeaderView(header);
        
        messageFragment.addEventDetail(eDetail);
        
        messageFragment.setMessageButton(findViewById(R.id.menu_buttons));
        
        return messageFragment;
	}
    
    private DateDetailFragment setUpDateFragment()
    {
    	DateDetailFragment dateDetailFragment = new DateDetailFragment();

        dateDetailFragment.setHeaderView(findViewById(R.id.header));
        
        dateDetailFragment.addEventDetail(eDetail);
        
        return dateDetailFragment;
    }
    
    private LocationFragment setUpLocationFragment()
    {
    	eDetail = GlobalEventList.eventDetailMap.get(mEventID);
    	
        LocationFragment locationFragment = new LocationFragment();
        
        locationFragment.setHeaderView(findViewById(R.id.header));

        locationFragment.addEventDetail(eDetail);
        
        locationFragment.showPageHeader();
        
        //locationFragment.setMapView(mapView);
        
        return locationFragment;
    }
    
	private EventDetailFragment setUpPhotosFragment() {

		eDetail = GlobalEventList.eventDetailMap.get(mEventID);
        
        EventDetailFragment eventDetailFragment = new EventDetailFragment();
        
        eventDetailFragment.setHeaderView(header);
        
        eventDetailFragment.addEventDetail(eDetail);
        
        return eventDetailFragment;
	}
    
	private PeopleListFragment setUpFriendsFragment() {

		eDetail = GlobalEventList.eventDetailMap.get(mEventID);
        
		PeopleListFragment fragment = new PeopleListFragment();
        
    	fragment.setHeaderView(findViewById(R.id.header));
    	
    	ArrayList<UserInfo> users = new ArrayList<UserInfo>();
    	
    	users.addAll(eDetail.getAttendees());
    	
    	fragment.setEventDetail(eDetail);
    	
    	fragment.setUserList(users);
        
        return fragment;
	}
	
	public void onRightHeaderButtonClick(View view)
	{
		String tag = view.getTag().toString();
		
		if (tag.equals(BaseDetailActivity.JOIN))
		{
			
		}
		else if (tag.equals(BaseDetailActivity.EDIT))
		{
			Intent showEdit = new Intent(EventDetailActivity.this, CreateEventActivity.class);
			showEdit.putExtra("EventID", eDetail.getEventID());
			startActivity(showEdit);
		}
	}
	
	private UpdatedAttendeeListener attendeeListener = new UpdatedAttendeeListener(){

		public void raised(UpdatedAttendeeEvent e) {
			
			EventServiceBuffer.setEventDetailListener(EventDetailActivity.this);
			
			EventServiceBuffer.getEventsFromService(eDetail.getEventID());
		}
		
	};
	
    /*public void switchToGridView(View view)
    {
    	EventDetailFragment fragment = (EventDetailFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_content);
    	
    	fragment.addGridToTableLayout();
    }
    
    public void switchToListView(View view)
    {
    	EventDetailFragment fragment = (EventDetailFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_content);
    	
    	//fragment.addListToAdapter();
    }*/
    
    /*public void seeMoreDetail(View view)
    {
    	EventDetailFragment fragment = (EventDetailFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_content);
    	
    	fragment.clearEditTextFocus();
    	
    	String description = view.getContentDescription().toString();
    	
    	Intent eventDetail = new Intent(EventDetailActivity.this, MoreEventDetailActivity.class);
    	
    	eventDetail.putExtra("DetailDescription", description);
    	eventDetail.putExtra("EventID", eDetail.getEventID());
    	
    	startActivity(eventDetail);
    }*/
	
	public void showMap(View view)
	{
		removeMessageText();
		FragmentManager     fm = getSupportFragmentManager();
        ft = fm.beginTransaction();
        
        if (fm.findFragmentById(R.id.fragment_content) == null)
        {
        	ft.add(R.id.fragment_content, locationFragment, "Location");
        }
        else if (!hasShownLocation)
        {
        	ft.replace(R.id.fragment_content, locationFragment, "Location");
        }
        else
        {
        	Fragment fragment = fm.findFragmentById(R.id.fragment_content);
    		ft.remove(fragment);
    		ft.show(locationFragment);
        }
        
        hasShownLocation = true;
        
		ft.commit();
	}
	
	public void showPhotos(View view)
	{
		removeMessageText();
		showFragment(photosFragment);
	}
	
	public void showFriends(View view)
	{
		removeMessageText();
        showFragment(peopleListFragment);
	}

	public void showTime(View view)
	{
		removeMessageText();
		showFragment(dateFragment);
	}
	
	public void showComments(View view)
	{
		setUpMessageText();
		showFragment(messageFragment);
	}

	private void removeMessageText()
	{
		LinearLayout menuButton = ((LinearLayout) findViewById(R.id.menu_buttons));
		
		if (menuButton.getBackground() != null)
		{
			menuButton.setBackgroundDrawable(null);
		}
		
		menuButton.findViewById(R.id.message_post_text).setVisibility(View.GONE);
		
		findViewById(R.id.menu_buttons).setVisibility(View.VISIBLE);
	}
	
	private void setUpMessageText() {

		LinearLayout menuButton = ((LinearLayout) findViewById(R.id.menu_buttons));
		
		menuButton.findViewById(R.id.message_post_text).setVisibility(View.VISIBLE);
		
		findViewById(R.id.menu_buttons).setVisibility(View.VISIBLE);
		
		menuButton.setBackgroundDrawable(DrawableCache.getDrawable(R.drawable.event_detail_message_button, GlobalVariables.DISPLAY_WIDTH - DrawableCache.convertDpToPixel(20)).getDrawable());

	}
	
	private void showFragment(Fragment showFragment) {
		FragmentManager     fm = getSupportFragmentManager();
        ft = fm.beginTransaction();
        
        if (fm.findFragmentById(R.id.fragment_content) == null)
        {
        	ft.add(R.id.fragment_content, showFragment);
        }
        else if (!hasShownLocation)
        {
        	ft.replace(R.id.fragment_content, showFragment);
        }
        else
        {
        	Fragment fragment = fm.findFragmentById(R.id.fragment_content);
        	if (fragment == locationFragment)
        	{
        		ft.hide(locationFragment);
        		ft.add(R.id.fragment_content, showFragment);
        	}
        	else
        	{
        		ft.remove(fragment);
            	ft.add(R.id.fragment_content, showFragment);
        	}
        }
        
		ft.commit();
	}
	
    @Override
    protected void onSaveInstanceState(Bundle outState) {
        //No call for super(). Bug on API Level > 11.
    }
    
	public void myEventOccurred(UpdatedEventDetailEvent evt) {
		
		EventServiceBuffer.removeEventDetailListener(this);
		
        eDetail = GlobalEventList.eventDetailMap.get(mEventID); 

        setUpFragments();
        
        if (eDetail.getAttendees().contains(UserInfoList.getInstance().get(GlobalVariables.getInstance().getUserId())))
        {
            setActionForRightMenu(takePhotoListener);
        }
        else
        {
        	setActionForRightMenu(joinMenuListener);
        }
        
        if (mNewPhoto != null)
        {
        	eDetail.getImages().add(mNewPhoto);
        }
        
        showPhotos(null);
		
		progressDialog.dismiss();
	}


	public void OnFragmentAttached() {
		
		if (progressDialog.isShowing())
		{
		
	        EventServiceBuffer.setEventDetailListener(this);
	        
	        EventServiceBuffer.getEventsFromService(mEventID);
	        
	        /*if (mNewPhoto != null)
	        {
	        	EventServiceBuffer.sendPhotoToDatabase(mNewPhoto.event_id, mNewPhoto.image_file_name, GlobalVariables.getInstance().getLocationInfo(), mNewPhoto.caption, mNewPhoto);
	        }*/
		}
		else
		{
			this.photosFragment.photoEvent();
			this.messageFragment.refreshMessageAdapter();
			this.peopleListFragment.setUpPeopleList();
			this.locationFragment.setMapOverlays();
			this.dateFragment.setDateLabels();
		}
		
	}
	
	public void onClickOpenComment(View view)
	{
		EventItem item = (EventItem) view.getTag();
		
		Intent openComment = new Intent(EventDetailActivity.this, CommentActivity.class);
		openComment.putExtra(CommentActivity.COMMENT, item);
		openComment.putExtra(CommentActivity.EVENT_ID, mEventID);
		
		startActivity(openComment);
	}
    
	/*public void onLikeClick(View view)
	{
		EventItem item = (EventItem) view.getTag();
		
		likeButtons.put(item.id, (ImageButton) view);
		
		likeButtons.get(item.id).setEnabled(false);

		for (Iterator<Like> it = item.likes.iterator(); it.hasNext(); )
		{
			Like like = it.next();
			
			if (like.user_id == GlobalVariables.getInstance().getUserId())
			{
				it.remove();
				EventDetailFragment fragment = (EventDetailFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_content);
				fragment.notifyDataSetChanged();
				likeButtons.get(like.id).setEnabled(true);
			}
		}
		
		EventServiceBuffer.setLikeInfoListener(this);
		
		EventServiceBuffer.likeEventItem(item);
	}

	public void likeSuccess(UpdatedLikeEvent likeEvent) {
		
		EventDetailFragment fragment = (EventDetailFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_content);
		fragment.addLikeToListAdapter(likeEvent);
		likeButtons.get(likeEvent.itemId).setEnabled(true);
	}*/
	
    @Override
	protected void backButtonPressed()
	{
		InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
	    imm.hideSoftInputFromWindow(findViewById(android.R.id.content).getWindowToken(), 0);
	    findViewById(R.id.menu_buttons).setVisibility(View.VISIBLE);
	    super.backButtonPressed();
		//super.onBackPressed();
	}
    
    @Override
    public void onDestroy()
    {
    	EventServiceBuffer.removePhotoListener(this);
    	super.onDestroy();
    }

	public void photoEvent(UpdatedPhotoEvent e) {
		
		FragmentManager     fm = getSupportFragmentManager();
        
        Fragment fragment = fm.findFragmentById(R.id.fragment_content);
        
        if (fragment != null)
        {
	        if (fragment instanceof EventDetailFragment)
	        {
	        	((EventDetailFragment) fragment).photoEvent();
	        }
        }
	}
}
