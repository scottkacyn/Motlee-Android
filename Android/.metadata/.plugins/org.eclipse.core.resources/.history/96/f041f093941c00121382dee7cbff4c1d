package com.motlee.android;

import java.text.ParseException;
import java.util.ArrayList;

import com.facebook.FacebookException;
import com.facebook.GraphPlace;
import com.facebook.PickerFragment;
import com.facebook.PlacePickerFragment;
import com.motlee.android.adapter.EventListAdapter;
import com.motlee.android.fragment.CreateEventFragment;
import com.motlee.android.fragment.EventListFragment;
import com.motlee.android.fragment.SearchFragment;
import com.motlee.android.fragment.SearchPlacesFragment;
import com.motlee.android.object.EventDetail;
import com.motlee.android.object.EventServiceBuffer;
import com.motlee.android.object.GlobalVariables;
import com.motlee.android.object.LocationInfo;
import com.motlee.android.object.event.UpdatedEventDetailEvent;
import com.motlee.android.object.event.UpdatedEventDetailListener;
import com.motlee.android.view.DateTimePicker;

import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Build;
import android.os.Bundle;
import android.os.Looper;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.RelativeLayout;
import android.widget.TextView;

public class CreateEventActivity extends FragmentActivity {
	
	public static String MAIN_FRAGMENT = "MainFragment";
	public static String SEARCH_PEOPLE = "SearchPeople";
	public static String SEARCH_PLACES = "SearchPlaces";
	
	
	private LocationListener locationListener;
	private static final Location SAN_FRANCISCO_LOCATION = new Location("") {{
        setLatitude(37.7750);
        setLongitude(-122.4183);
	}};
	
	private Location mLocation;
	private static final int SEARCH_RADIUS_METERS = 1000;
	private static final int SEARCH_RESULT_LIMIT = 50;
	private static final String SEARCH_TEXT = "restaurant";
	private static final int LOCATION_CHANGE_THRESHOLD = 50; // meters
	private View mCurrentDateTimePickerFocus;
	
	private LocationInfo selectLocation;
	private SearchPlacesFragment searchPlacesFragment;

	/*
	 * get initial location of user and set up locationListener to update if 
	 * user moves by more than 50 meters
	 */
	private void setUpLocationListener() {
		try {
		    mLocation = null;
		    // Instantiate the default criteria for a location provider
		    Criteria criteria = new Criteria();
		    // Get a location manager from the system services
		    LocationManager locationManager = 
		            (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		    // Get the location provider that best matches the criteria
		    String bestProvider = locationManager.getBestProvider(criteria, false);
		    if (bestProvider != null) {
		        // Get the user's last known location
		    	mLocation = locationManager.getLastKnownLocation(bestProvider);
		        if (locationManager.isProviderEnabled(bestProvider) 
		                    && locationListener == null) {
		            // Set up a location listener if one is not already set up
		            // and the selected provider is enabled
		            locationListener = new LocationListener() {
		                
		                public void onLocationChanged(Location location) {
		                    // On location updates, compare the current
		                    // location to the desired location set in the
		                    // place picker
		                    float distance = location.distanceTo(
		                            mLocation);
		                    if (distance >= LOCATION_CHANGE_THRESHOLD) {
		                        mLocation = location;
		                    }
		                }
		                
		                public void onStatusChanged(String s, int i, 
		                            Bundle bundle) {
		                }
		                
		                public void onProviderEnabled(String s) {
		                }
		                
		                public void onProviderDisabled(String s) {
		                }
		            };
		            locationManager.requestLocationUpdates(bestProvider, 
		                    1, LOCATION_CHANGE_THRESHOLD,
		                    locationListener, 
		                    Looper.getMainLooper());
		        }
		    }
		    if (mLocation == null) {
		        // Set the default location if there is no
		        // initial location
		        String model = Build.MODEL;
		        if (model.equals("sdk") || 
		                model.equals("google_sdk") || 
		                model.contains("x86")) {
		            // This may be the emulator, use the default location
		        	mLocation = SAN_FRANCISCO_LOCATION;
		        }
		    }
		    if (mLocation != null) {
		        // Configure the place picker: search center, radius,
		        // query, and maximum results.
		    	searchPlacesFragment.setLocation(mLocation);
		    	searchPlacesFragment.setRadiusInMeters(SEARCH_RADIUS_METERS);
		    	searchPlacesFragment.setSearchText(SEARCH_TEXT);
		    	searchPlacesFragment.setResultsLimit(SEARCH_RESULT_LIMIT);
		    } else {
		            // If no location found, show an error
		        Log.e("CreateEventActivity", "No Location Was Found");
		    }
		} catch (Exception ex) {
		    Log.e("CreateEventActivity", ex.getMessage());
		}
	}
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
 
        searchPlacesFragment = new SearchPlacesFragment();
        
        setUpLocationListener();
        
        selectLocation = new LocationInfo("My Location", mLocation.getLatitude(), mLocation.getLongitude());
        
        EventServiceBuffer.getInstance(this);
        findViewById(R.id.menu_buttons).setVisibility(View.GONE);
        
        FragmentManager     fm = getSupportFragmentManager();
        FragmentTransaction ft = fm.beginTransaction();
        
        CreateEventFragment createEventFragment = new CreateEventFragment();
        createEventFragment.setHeaderView(findViewById(R.id.header));
        createEventFragment.setLocationInfo(selectLocation);
        
        ft.add(R.id.fragment_content, createEventFragment, MAIN_FRAGMENT)
        .commit();
        
    }
    
    /*
     * removes a person from the event. gets the facebookUID and view and removes from 
     * person list.
     */
    public void removePersonFromEvent(View view)
    {
    	CreateEventFragment fragment = (CreateEventFragment) getSupportFragmentManager().findFragmentByTag(MAIN_FRAGMENT);
    	
    	fragment.removePersonFromEvent((View) view.getParent().getParent().getParent().getParent(), Integer.parseInt((String) view.getContentDescription()));
    }
    
    /*
     * sets a location from a GraphPlace and updates it in the CreateEventFragment
     */
    public void setLocationInfo(GraphPlace graphPlace, CreateEventFragment fragment)
    {
    	this.selectLocation = new LocationInfo(graphPlace.getName(), graphPlace.getLocation().getLatitude(), graphPlace.getLocation().getLongitude());
    	fragment.setLocationInfo(selectLocation);
    }
    
    public void addPersonToEvent(View view)
    {
    	Integer facebookID = Integer.parseInt((String) view.getContentDescription());
    	
    	String name = (String) ((TextView) ((View) view.getParent()).findViewById(R.id.search_button_name)).getText();
    	
        FragmentManager     fm = getSupportFragmentManager();
        FragmentTransaction ft = fm.beginTransaction();
        
        CreateEventFragment createEventFragment = (CreateEventFragment) fm.findFragmentByTag(MAIN_FRAGMENT);
        ft.show(createEventFragment);
        
        createEventFragment.addPersonToEvent(facebookID, name);
        
        SearchFragment searchFragment = (SearchFragment) fm.findFragmentByTag(SEARCH_PEOPLE);
        ft.remove(searchFragment)
        .commit();
    }
    
    /*
     * 
     */
    public void seeMoreDetail(View view)
    {
        FragmentManager     fm = getSupportFragmentManager();
        FragmentTransaction ft = fm.beginTransaction();
        
        CreateEventFragment createEventFragment = (CreateEventFragment) fm.findFragmentByTag(MAIN_FRAGMENT);
        ft.hide(createEventFragment);
        
        if (view.getContentDescription() == "Friend")
        {
	        SearchFragment searchFragment = new SearchFragment();
	        searchFragment.setHeaderView(findViewById(R.id.header));
	        ft.add(R.id.fragment_content, searchFragment, SEARCH_PEOPLE)
	        .commit();
        }
        
        if (view.getContentDescription() == "Location")
        {

        	setUpLocationListener();
        	
        	searchPlacesFragment.setHeaderView(findViewById(R.id.header));
        	
	        ft.add(R.id.fragment_content, searchPlacesFragment, SEARCH_PLACES)
	        .commit();
        }
    }
    
    public void onRightHeaderButtonClick(View view)
    {
    	CreateEventFragment fragment = (CreateEventFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_content);
    	final ArrayList<Integer> attendees = fragment.getAttendeeList();
    	final EventDetail eDetail = new EventDetail();
    	
    	eDetail.setEventName(fragment.getEventName());
    	eDetail.setStartTime(fragment.getStartTime().getTime());
    	eDetail.setEndTime(fragment.getEndTime().getTime());
    	eDetail.setOwnerID(GlobalVariables.getInstance().getUserId());
    	
    	EventServiceBuffer.setEventDetailListener(new UpdatedEventDetailListener(){

			public void myEventOccurred(UpdatedEventDetailEvent evt) {
				
				if (evt.getEventIds().size() == 1)
				{
					for (Integer eventID : evt.getEventIds())
					{
						EventServiceBuffer.sendAttendeesForEvent(eventID, attendees);
					}
				}
			}
    	});
    	
    	EventServiceBuffer.sendNewEventToDatabase(eDetail);
    }
    
	public void openDateTimePicker(View view) {

		mCurrentDateTimePickerFocus = (View) view.getParent();
		showDateTimeDialog();
	}
	
	private void showDateTimeDialog() {
		// Create the dialog
		final Dialog mDateTimeDialog = new Dialog(this);
		// Inflate the root layout
		final RelativeLayout mDateTimeDialogView = (RelativeLayout) getLayoutInflater().inflate(R.layout.date_time_dialog, null);
		// Grab widget instance
		final DateTimePicker mDateTimePicker = (DateTimePicker) mDateTimeDialogView.findViewById(R.id.DateTimePicker);
		
		// Set the time into the date dialog that we have in our datetime label
		String time = (String) ((TextView) mCurrentDateTimePickerFocus.findViewById(R.id.edit_event_date_time_text)).getText();
		try {
			mDateTimePicker.getCalendar().setTime(GlobalVariables.getInstance().getDateFormatter().parse(time));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			Log.e("CreateEventActivity", e.getMessage());
		}
		mDateTimePicker.updateDateTime();
		
		// Check is system is set to use 24h time (this doesn't seem to work as expected though)
		final String timeS = android.provider.Settings.System.getString(this.getContentResolver(), android.provider.Settings.System.TIME_12_24);
		final boolean is24h = !(timeS == null || timeS.equals("12"));
		
		// Update demo TextViews when the "OK" button is clicked 
		((Button) mDateTimeDialogView.findViewById(R.id.SetDateTime)).setOnClickListener(new OnClickListener() {
	
			public void onClick(View v) {
				
				mDateTimePicker.clearFocus();
				
				CreateEventFragment fragment = (CreateEventFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_content);
				fragment.setTime(mCurrentDateTimePickerFocus, mDateTimePicker.getCalendar());
				
				mDateTimeDialog.dismiss();
			}
		});
	
		// Cancel the dialog when the "Cancel" button is clicked
		((Button) mDateTimeDialogView.findViewById(R.id.CancelDialog)).setOnClickListener(new OnClickListener() {
	
			public void onClick(View v) {
				// TODO Auto-generated method stub
				mDateTimeDialog.cancel();
			}
		});
	
		// Reset Date and Time pickers when the "Reset" button is clicked
		((Button) mDateTimeDialogView.findViewById(R.id.ResetDateTime)).setOnClickListener(new OnClickListener() {
	
			public void onClick(View v) {
				// TODO Auto-generated method stub
				mDateTimePicker.reset();
			}
		});
		
		// Setup TimePicker
		mDateTimePicker.setIs24HourView(is24h);
		// No title on the dialog window
		mDateTimeDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
		// Set the dialog content view
		mDateTimeDialog.setContentView(mDateTimeDialogView);
		// Display the dialog
		mDateTimeDialog.show();
	}
}
